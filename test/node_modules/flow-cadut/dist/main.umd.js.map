{"version":3,"file":"main.umd.js","sources":["../src/env.js","../src/imports.js","../src/fixer.js","../src/strings.js","../src/parser.js","../src/type-checker.js","../src/plugins.js","../src/args.js","../src/interactions.js"],"sourcesContent":["/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { config } from \"@onflow/config\";\n\nexport const DEPLOYED_CONTRACTS = {\n  emulator: {\n    FlowToken: \"0xee82856bf20e2aa6\",\n    FungibleToken: \"0x0ae53cb6e3f42a79\",\n  },\n  testnet: {\n    FlowToken: \"0x7e60df042a9c0868\",\n    FungibleToken: \"0x9a0766d93b6608b7\",\n    LockedTokens: \"0x95e019a17d0e23d7\",\n    StakingProxy: \"0x7aad92e5a0715d21\",\n    FUSD: \"0xe223d8a629e49c68\",\n  },\n  mainnet: {\n    FlowToken: \"0x1654653399040a61\",\n    FungibleToken: \"0xf233dcee88fe0abe\",\n    LockedTokens: \"0x8d0e87b65159ae63\",\n    StakingProxy: \"0x62430cf28c26d095\",\n    FUSD: \"0x3c5959b568896393\",\n  },\n};\n\nexport const ACCESS_NODES = {\n  mainnet: \"https://access-mainnet-beta.onflow.org\",\n  testnet: \"https://access-testnet.onflow.org\",\n  emulator: \"http://localhost:8080\",\n};\n\nexport const getEnvironmentName = async () => {\n  return (await config().get(\"ix.env\")) || \"emulator\";\n};\n\nexport const getEnvironment = async () => {\n  const env = await getEnvironmentName();\n  return DEPLOYED_CONTRACTS[env] || DEPLOYED_CONTRACTS.emulator;\n};\n\nexport const setEnvironment = async (networkName = \"emulator\", options = {}) => {\n  const network = networkName.toLowerCase();\n\n  if (!DEPLOYED_CONTRACTS[network]) {\n    throw new Error(\n      `Provided value \"${network}\" is not supported. Try \"emulator\", \"testnet\" or \"mainnet\". Default: \"emulator\"`\n    );\n  }\n\n  const { port, endpoint, limit } = options;\n  const portBased =\n    network === \"emulator\" && port ? `http://localhost:${port}` : ACCESS_NODES[network];\n  const accessNode = endpoint || portBased;\n\n  await config().put(\"ix.env\", network);\n\n  if (limit) {\n    await config().put(\"ix.executionLimit\", limit);\n  }\n\n  await config().put(\"accessNode.api\", accessNode);\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\n/**\n * Returns list of missing imports.\n * @param {string} code - template cadence code\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const missingImports = (code, addressMap = {}) => {\n  const importsList = extractImports(code);\n  const missing = [];\n\n  for (const key in importsList) {\n    if (!addressMap[key] && Object.prototype.hasOwnProperty.call(importsList, key)) {\n      missing.push(key);\n    }\n  }\n\n  return missing;\n};\n\n/**\n * Reports missing imports.\n * @param {Array.<string>} list - list of missing imports\n * @param {string} prefix - error message prefix\n */\nexport const report = (list = [], prefix = \"\") => {\n  const errorMessage = `Missing imports for contracts:`;\n  const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n  console.error(message, list);\n};\n\n/**\n * Reports missing imports.\n * @param {string} code - template cadence code\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param {string} [prefix] - prefix to add to error message\n */\nexport const reportMissingImports = (code, addressMap, prefix = \"\") => {\n  const list = missingImports(code, addressMap);\n  if (list.length > 0) {\n    report(list, prefix);\n  }\n};\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n\n    // If the address is not inside addressMap we shall not alter import statement\n    const validAddress = newAddress || address;\n    return `${imp}${contract} from ${validAddress}`;\n  });\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n\nexport const padAddress = (address) => {\n  return \"0x\" + sansPrefix(address).padStart(16, \"0\");\n};\n\nexport const toFixedValue = (val) => parseFloat(val).toFixed(8);\n\nexport const domains = [\"public\", \"private\", \"storage\"];\n\nexport const parsePath = (path) => {\n  if (path.startsWith(\"/\")) {\n    const parts = path.slice(1).split(\"/\");\n    if (parts.length !== 2) {\n      throw Error(\"Incorrect Path - identifier missing\");\n    }\n    if (!domains.includes(parts[0])){\n      throw Error(\"Incorrect Path - wrong domain\")\n    }\n    const [domain, identifier] = parts;\n    return { domain, identifier };\n  }\n  throw Error(\"Incorrect Path - shall start with `/`\");\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const capitalizeFirstLetter = (input) => {\n  const [first] = input.split(\"\");\n  return first.toUpperCase() + input.slice(1);\n};\n\nexport const underscoreToCamelCase = (text) => {\n  return text\n    .replace(/-/g, \"_\")\n    .split(\"_\")\n    .map((word, i) => (i > 0 ? capitalizeFirstLetter(word) : word))\n    .join(\"\");\n};\n\nexport const trimAndSplit = (input, trimWith, splitBy) => {\n  if (splitBy) {\n    return input.replace(trimWith, \"\").split(splitBy);\n  }\n  return input.replace(trimWith, \"\").split(getSplitCharacter(input));\n};\n\nexport const getSplitCharacter = (input) => {\n  switch (true) {\n    case input.indexOf(\"//\") >= 0:\n      return \"//\";\n    case input.indexOf(\"/\") >= 0:\n      return \"/\";\n    case input.indexOf(\"\\\\\") >= 0:\n      return \"\\\\\";\n    default:\n      return \"\";\n  }\n};\n\nexport const collapseSpaces = (input) => input.replace(/\\s+/g, \" \");\nexport const removeSpaces = (input) => input.replace(/\\s+/g, \"\");\nexport const stripNewLines = (input) => input.replace(/\\r\\n|\\n|\\r/g, \" \");\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { collapseSpaces } from \"./strings\";\n\nexport const CONTRACT = \"contract\";\nexport const TRANSACTION = \"transaction\";\nexport const SCRIPT = \"script\";\nexport const UNKNOWN = \"unknown\";\n\nexport const generateSchema = (argsDefinition) =>\n  argsDefinition\n    .split(\",\")\n    .map((item) => item.replace(/\\s*/g, \"\"))\n    .filter((item) => item !== \"\");\n\nexport const stripComments = (code) => {\n  const commentsRegExp = /(\\/\\*[\\s\\S]*?\\*\\/)|(\\/\\/.*)/g;\n  return code.replace(commentsRegExp, \"\");\n};\n\nexport const extract = (code, keyWord) => {\n  const noComments = stripComments(code);\n  const target = collapseSpaces(noComments.replace(/[\\n\\r]/g, \"\"));\n\n  if (target) {\n    const regexp = new RegExp(keyWord, \"g\");\n    const match = regexp.exec(target);\n\n    if (match) {\n      if (match[1] === \"\") {\n        return [];\n      }\n      return generateSchema(match[1]);\n    }\n  }\n  return [];\n};\n\nexport const extractSigners = (code) => {\n  return extract(code, `(?:prepare\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractScriptArguments = (code) => {\n  return extract(code, `(?:fun\\\\s+main\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractTransactionArguments = (code) => {\n  return extract(code, `(?:transaction\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractContractName = (code) => {\n  const contractNameMatcher = /\\w+\\s+contract\\s+(?:interface)*\\s*(\\w*)/g;\n  const noComments = stripComments(code);\n  const singleLine = noComments.replace(/\\r\\n|\\n|\\r/g, \" \");\n  const matches = contractNameMatcher.exec(singleLine);\n\n  if (matches.length < 2) {\n    throw new Error(\"Contract Error: can't find name of the contract\");\n  }\n\n  return matches[1];\n};\n\nexport const extractContractParameters = (code) => {\n  const complexMatcher = /(resource|struct)\\s+\\w+\\s*{[\\s\\S]+?}/g;\n  const contractNameMatcher =\n    /(?:access\\(\\w+\\)|pub)\\s+contract\\s+(?:interface)*\\s*(\\w*)(\\s*{[.\\s\\S]*init\\s*\\((.*?)\\)[.\\s\\S]*})?/g;\n\n  const noComments = stripComments(code);\n  const noComplex = noComments.replace(complexMatcher, \"\");\n  const matches = contractNameMatcher.exec(noComplex);\n\n  if (matches.length < 2) {\n    throw new Error(\"Contract Error: can't find name of the contract\");\n  }\n\n  return {\n    contractName: matches[1],\n    args: matches[3] || \"\",\n  };\n};\n\nexport const getTemplateInfo = (template) => {\n  const contractMatcher = /\\w+\\s+contract\\s+(\\w*\\s*)\\w*/g;\n  const transactionMatcher = /transaction\\s*(\\(\\s*\\))*\\s*/g;\n  const scriptMatcher = /pub\\s+fun\\s+main\\s*/g;\n\n  const code = stripComments(template);\n\n  if (transactionMatcher.test(code)) {\n    const signers = extractSigners(code);\n    const args = extractTransactionArguments(code);\n    return {\n      type: TRANSACTION,\n      signers: signers.length,\n      args: args,\n    };\n  }\n\n  if (scriptMatcher.test(code)) {\n    const args = extractScriptArguments(code);\n    return {\n      type: SCRIPT,\n      args: args,\n    };\n  }\n\n  if (contractMatcher.test(code)) {\n    const { contractName, args } = extractContractParameters(code);\n    return {\n      type: CONTRACT,\n      signers: 1,\n      args,\n      contractName,\n    };\n  }\n\n  return {\n    type: UNKNOWN,\n  };\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const wrongType = (type) => !type || typeof type != \"string\";\n\nexport const isBasicNumType = (type) => {\n  if (wrongType(type)) return false;\n  return type.startsWith(\"Int\") || type.startsWith(\"UInt\") || type.startsWith(\"Word\");\n};\n\nexport const isFixedNumType = (type) => {\n  if (wrongType(type)) return false;\n  return type.startsWith(\"Fix64\") || type.startsWith(\"UFix64\");\n};\n\nexport const isString = (type) => type === \"String\";\nexport const isCharacter = (type) => type === \"Character\";\nexport const isBoolean = (type) => type === \"Bool\";\nexport const isAddress = (type) => type === \"Address\" || type === \"Address?\";\nexport const isPath = (type) => type === \"Path\" || type === \"Path?\";\n\nexport const isBasicType = (type) => {\n  if (wrongType(type)) return false;\n\n  let fixedType = type.endsWith(\"?\") ? type.slice(0, -1) : type;\n  return (\n    isBasicNumType(fixedType) ||\n    isString(fixedType) ||\n    isCharacter(fixedType) ||\n    isBoolean(fixedType)\n  );\n};\n\nexport const isArray = (type) => {\n  if (wrongType(type)) return false;\n\n  const clearType = type.replace(/\\s/g, \"\");\n  return clearType.startsWith(\"[\") && clearType.endsWith(\"]\");\n};\n\nexport const isDictionary = (type) => {\n  if (wrongType(type)) return false;\n\n  const clearType = type.replace(/\\s/g, \"\");\n  return clearType.startsWith(\"{\") && clearType.endsWith(\"}\");\n};\n\nexport const isComplexType = (type) => isArray(type) || isDictionary(type);\n","import { config } from \"@onflow/fcl\";\n\nexport const PLUGIN_TYPES = {\n  ARGUMENT: \"argument\",\n};\n\nexport const registerPlugin = async (plugin) => {\n  const { type } = plugin;\n  const registeredPlugins = await config().get(\"ix.plugins\");\n  const plugins = registeredPlugins || {};\n  const typedPlugins = plugins[type] || [];\n\n  await config().put(\"ix.plugins\", {\n    ...plugins,\n    [type]: [...typedPlugins, plugin],\n  });\n};\n\nexport const getPlugins = async (type) => {\n  const registeredPlugins = await config().get(\"ix.plugins\");\n  const plugins = registeredPlugins || {};\n  const byType = plugins[type];\n\n  if (byType && byType.length > 0) {\n    return byType;\n  }\n  return false;\n};\n\nexport const applyPlugins = async (props, plugins) => {\n  let type = props.type;\n  let value = props.value;\n\n  for (let i = 0; i < plugins.length; i++) {\n    const { resolver } = plugins[i];\n    const result = await resolver(type, value);\n    type = result.type;\n    value = result.value;\n  }\n\n  return { type, value };\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport * as fcl from \"@onflow/fcl\";\n\nimport { parsePath, toFixedValue, withPrefix } from \"./fixer\";\nimport { getTemplateInfo } from \"./parser\";\nimport {\n  isBasicType,\n  isFixedNumType,\n  isAddress,\n  isPath,\n  isArray,\n  isDictionary,\n  isComplexType,\n  wrongType,\n  isBasicNumType,\n} from \"./type-checker\";\n\nimport { removeSpaces } from \"./strings\";\nimport { getPlugins, applyPlugins, PLUGIN_TYPES } from \"./plugins\";\n\nconst throwTypeError = (msg) => {\n  throw new Error(\"Type Error: \" + msg);\n};\n\nexport const splitArgs = (pair) => {\n  return pair\n    .split(/(\\w+)\\s*:\\s*([\\w{}[\\]:\\s?]*)/)\n    .filter((item) => item !== \"\")\n    .map((item) => item.replace(/\\s*/g, \"\"));\n};\n\nexport const argType = (pair) => splitArgs(pair)[1];\n\nexport const getDictionaryTypes = (type) => {\n  const match = /{(.*)}/.exec(type);\n  return match[1]\n    .split(/([^:]*):(.*)/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item);\n};\n\nexport const getArrayType = (type) => {\n  const match = /\\[(.*)\\]/.exec(type);\n  return removeSpaces(match[1]);\n};\n\n/**\n * Reports missing arguments.\n * @param {number} found - number of arguments passed into method\n * @param {number} required - number of arguments required to execute the code\n * @param {string} prefix - error message prefix\n */\nexport const reportArguments = (found, required, prefix = \"\") => {\n  if (required > found) {\n    const errorMessage = `Incorrect number of arguments: found ${found} of ${required}`;\n    const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n    console.error(message);\n  }\n};\n\n/**\n * Reports missing items.\n * @param {string} itemType - name of the missing item\n * @param {number} found - number of arguments passed into method\n * @param {number} required - number of arguments required to execute the code\n * @param {string} prefix - error message prefix\n */\nexport const reportMissing = (itemType = \"items\", found, required, prefix = \"\") => {\n  if (required !== found) {\n    const errorMessage = `Incorrect number of ${itemType}: found ${found} of ${required}`;\n    const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n    console.error(message);\n  }\n};\n\nexport const raw = (type) => type.slice(0, -1);\n\nexport const resolveBasicType = (type) => {\n  if (wrongType(type)) return false;\n\n  if (type.includes(\"?\")) {\n    return t.Optional(t[raw(type)]);\n  }\n  return t[type];\n};\n\nexport const resolveType = (type) => {\n  if (isComplexType(type)) {\n    switch (true) {\n      case isArray(type): {\n        const arrayType = getArrayType(type);\n        return t.Array(resolveType(arrayType));\n      }\n\n      case isDictionary(type): {\n        const [key, value] = getDictionaryTypes(type);\n        const dictionaryType = { key: resolveType(key), value: resolveType(value) };\n        return t.Dictionary(dictionaryType);\n      }\n\n      default: {\n        return resolveBasicType(type);\n      }\n    }\n  }\n  return resolveBasicType(type);\n};\n\n/**\n * Map single argument to fcl.arg representation.\n * @param {string} rawType - Cadence value type\n * @param {any} rawValue - actual value\n * @returns any - mapped fcl.arg value\n */\nexport const mapArgument = async (rawType, rawValue) => {\n  const plugins = await getPlugins(PLUGIN_TYPES.ARGUMENT);\n\n  let value = rawValue;\n  let type = rawType;\n\n  if (plugins) {\n    let applied = await applyPlugins({ type: rawType, value: rawValue }, plugins);\n    value = applied.value;\n    type = applied.type;\n  }\n\n  const resolvedType = resolveType(type);\n\n  switch (true) {\n    case isBasicType(type): {\n      return fcl.arg(value, resolvedType);\n    }\n\n    case isFixedNumType(type): {\n      // Try to parse value and throw if it fails\n      if (value === null) {\n        return fcl.arg(null, resolvedType);\n      }\n      if (isNaN(parseFloat(value))) {\n        throwTypeError(\"Expected proper value for fixed type\");\n      }\n      return fcl.arg(toFixedValue(value), resolvedType);\n    }\n\n    case isAddress(type): {\n      const prefixedAddress = withPrefix(value);\n      return fcl.arg(prefixedAddress, resolvedType);\n    }\n\n    case isPath(type): {\n      return fcl.arg(\n        parsePath(value),\n        resolvedType\n      );\n    }\n\n    case isArray(type): {\n      const arrayType = getArrayType(type);\n\n      if (isComplexType(arrayType)) {\n        const mappedValue = await Promise.all(\n          value.map(async (v) => {\n            const { value } = await mapArgument(arrayType, v);\n            return value;\n          })\n        );\n        return fcl.arg(mappedValue, resolvedType);\n      }\n\n      const result = fcl.arg(value, resolvedType);\n      return result;\n    }\n\n    case isDictionary(type): {\n      const [keyType, valueType] = getDictionaryTypes(type);\n      const finalValue = [];\n      const keys = Object.keys(value);\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        let resolvedValue;\n        if (isComplexType(valueType)) {\n          resolvedValue = (await mapArgument(valueType, value[key])).value;\n        } else {\n          resolvedValue = value[key];\n        }\n\n        const fixedKey = isBasicNumType(keyType) ? parseInt(key) : key;\n\n        finalValue.push({\n          key: fixedKey,\n          value: resolvedValue,\n        });\n      }\n\n      const result = fcl.arg(finalValue, resolvedType);\n      return result;\n    }\n\n    default: {\n      throw `${type} is not supported`;\n    }\n  }\n};\n\nexport const assertType = (arg) => {\n  return arg.xform.asArgument(arg.value);\n};\n\n/**\n * Map arguments with provided schema.\n * @param {[string]} schema - array of Cadence value types\n * @param {[any]} values - array of passed values\n * @returns [any] - array of mapped fcl.arg values\n */\nexport const mapArguments = async (schema = [], values) => {\n  if (schema.length > values.length) {\n    throw new Error(\"Not enough arguments\");\n  }\n  return Promise.all(\n    values.map(async (value, i) => {\n      const mapped = await mapArgument(schema[i], value);\n      assertType(mapped);\n      return mapped;\n    })\n  );\n};\n\n/**\n * Map arguments via Cadence template.\n * @param {string} code - Cadence template\n * @param {[any]} values - array of values\n * @returns [any] - array of mapped fcl.arg\n */\nexport const mapValuesToCode = async (code, values = []) => {\n  const schema = getTemplateInfo(code).args.map(argType);\n  return mapArguments(schema, values);\n};\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst rawArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nexport const resolveArguments = async (args, code) => {\n  if (args.length === 0) {\n    return [];\n  }\n\n  // We can check first element in array. If it's last value is instance\n  // of @onflow/types then we assume that the rest of them are also unprocessed\n  const first = args[0];\n  if (Array.isArray(first) && first.length > 0) {\n    const last = first[first.length - 1];\n    if (last.asArgument) {\n      return rawArgs(args);\n    }\n  }\n  // Otherwise we process them and try to match them against the code\n  return mapValuesToCode(code, args);\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { resolveArguments } from \"./args\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { config } from \"@onflow/config\";\nimport { getEnvironment } from \"./env\";\n\nexport const prepareInteraction = async (props, type) => {\n  const { code, cadence, args, addressMap, limit, processed } = props;\n\n  // allow to pass code via \"cadence\" field simillar to fcl.query/mutate\n  const codeTemplate = code || cadence;\n\n  const env = await getEnvironment();\n  const ixAddressMap = {\n    ...env,\n    ...addressMap,\n  };\n  const ixCode = processed ? codeTemplate : replaceImportAddresses(codeTemplate, ixAddressMap);\n\n  const ix = type === \"script\" ? [fcl.script(ixCode)] : [fcl.transaction(ixCode)];\n\n  if (args) {\n    const resolvedArgs = await resolveArguments(args, code);\n    ix.push(fcl.args(resolvedArgs));\n  }\n\n  // Handle execution limit\n  const defaultLimit = await config().get(\"ix.executionLimit\");\n  const fallBackLimit = defaultLimit || 100;\n\n  const ixLimit = limit || fallBackLimit;\n  ix.push(fcl.limit(ixLimit));\n\n  if (type === \"transaction\") {\n    const { proposer, payer, signers = [] } = props;\n    const ixSigners = signers.length === 0 ? [payer] : signers;\n    const ixProposer = proposer || payer;\n\n    ix.push(fcl.payer(payer));\n    ix.push(fcl.proposer(ixProposer));\n    ix.push(fcl.authorizations(ixSigners));\n  }\n\n  return fcl.send(ix);\n};\n\n/**\n * Sends script code for execution.\n * Returns decoded value.\n */\n\nexport const executeScript = async (props) => {\n  const { raw = false } = props;\n  try {\n    const response = await prepareInteraction(props, \"script\");\n\n    // In some cases one might want to have raw output without decoding the response\n    if (raw) {\n      return [response.encodedData, null];\n    }\n\n    const decoded = await fcl.decode(response);\n    return [decoded, null];\n  } catch (e) {\n    return [null, e];\n  }\n};\n\nexport const waitForStatus = (statusValue) => {\n  if (typeof statusValue === \"string\") {\n    const status = statusValue.toLowerCase();\n    if (status.includes(\"final\")) {\n      return \"onceFinalized\";\n    }\n\n    if (status.includes(\"exec\")) {\n      return \"onceExecuted\";\n    }\n\n    if (status.includes(\"seal\")) {\n      return \"onceSealed\";\n    }\n  }\n\n  // wait for transaction to be sealed by default\n  console.log(\n    `⚠️ \\x1b[33mStatus value \\x1b[1m\\x1b[35m\"${statusValue}\"\\x1b[33m\\x1b[2m is not supported. Reverting to \\x1b[32m\"onceSealed\"\\x1b[0m`\n  );\n  return \"onceSealed\";\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n */\nexport const sendTransaction = async (props) => {\n  const { wait = \"seal\" } = props;\n  try {\n    const response = await prepareInteraction(props, \"transaction\");\n    if (wait) {\n      const waitMethod = waitForStatus(wait);\n      const rawResult = await fcl.tx(response)[waitMethod]();\n      const txResult = {\n        txId: response,\n        ...rawResult,\n      };\n      return [txResult, null];\n    }\n    return [response.transactionId, null];\n  } catch (e) {\n    return [null, e];\n  }\n};\n\n// TODO: add arguments for \"init\" method into template\nexport const addContractTemplate = `\n    transaction(name: String, code: String) {\n      prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        \n        acct.contracts.add(\n          name: name,\n          code: decoded,\n        )\n      }\n    }\n  `;\nexport const updateContractTemplate = `\n  transaction(name: String, code: String){\n    prepare(acct: AuthAccount){\n      let decoded = code.decodeHex()\n      \n      if acct.contracts.get(name: name) == nil {\n        acct.contracts.add(name: name, code: decoded)\n      } else {\n        acct.contracts.update__experimental(name: name, code: decoded)\n      }\n    }\n  }\n`;\n\n// TODO: add jsdoc\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nexport const deployContract = async (props) => {\n  const {\n    name,\n    to,\n    payer,\n    proposer,\n    code: contractCode,\n    update = false,\n    processed = false,\n    addressMap = {},\n  } = props;\n\n  // Update imprort statement with addresses from addressMap\n  const ixContractCode = processed\n    ? contractCode\n    : replaceImportAddresses(contractCode, addressMap);\n\n  // TODO: Implement arguments for \"init\" method\n  const template = update ? addContractTemplate : updateContractTemplate;\n\n  const hexedCode = hexContract(ixContractCode);\n  const args = [name, hexedCode];\n  // Set roles\n  let ixProposer = to;\n  let ixPayer = to;\n  let ixSigners = [to];\n\n  if (payer) {\n    ixPayer = payer;\n    ixProposer = proposer || payer;\n  }\n\n  return sendTransaction({\n    payer: ixPayer,\n    proposer: ixProposer,\n    signers: ixSigners,\n    code: template,\n    args,\n  });\n};\n\nexport const updateContract = async (props) => {\n  return deployContract({ ...props, update: true });\n};\n"],"names":["DEPLOYED_CONTRACTS","emulator","FlowToken","FungibleToken","testnet","LockedTokens","StakingProxy","FUSD","mainnet","ACCESS_NODES","getEnvironment","config","get","getEnvironmentName","env","getPairs","line","split","map","item","replace","filter","length","collect","acc","contract","address","extractImports","code","includes","reduce","missingImports","addressMap","importsList","missing","key","Object","prototype","hasOwnProperty","call","push","report","list","prefix","errorMessage","console","error","REGEXP_IMPORT","replaceImportAddresses","byName","match","imp","_","Function","domains","capitalizeFirstLetter","input","first","toUpperCase","slice","getSplitCharacter","indexOf","collapseSpaces","CONTRACT","TRANSACTION","SCRIPT","generateSchema","argsDefinition","stripComments","extract","keyWord","noComments","target","RegExp","exec","extractSigners","extractScriptArguments","extractTransactionArguments","extractContractParameters","noComplex","matches","Error","contractName","args","getTemplateInfo","template","test","signers","type","wrongType","isBasicNumType","startsWith","isArray","clearType","endsWith","isDictionary","isComplexType","pact","state","value","s","o","_settle","bind","v","then","observer","_Pact","onFulfilled","onRejected","result","this","callback","e","_this","PLUGIN_TYPES","ARGUMENT","getPlugins","registeredPlugins","byType","splitArgs","pair","argType","getDictionaryTypes","getArrayType","resolveBasicType","t","Optional","raw","resolveType","arrayType","Array","dictionaryType","Dictionary","mapArgument","rawType","rawValue","plugins","resolvedType","fixedType","isString","isCharacter","isBoolean","isBasicType","fcl","arg","isFixedNumType","isNaN","parseFloat","msg","throwTypeError","toFixed","isAddress","prefixedAddress","sansPrefix","isPath","path","parts","domain","identifier","parsePath","Promise","all","mappedValue","finalValue","keyType","valueType","keys","array","body","i","fixedKey","parseInt","resolvedValue","_mapArgument","_cycle","thenable","reject","props","resolver","applyPlugins","applied","mapArguments","schema","values","mapped","xform","asArgument","mapValuesToCode","resolveArguments","arr","convert","unwrap","rawArgs","recover","prepareInteraction","cadence","limit","processed","codeTemplate","defaultLimit","ix","proposer","payer","ixSigners","ixProposer","authorizations","send","ixAddressMap","ixCode","script","transaction","resolvedArgs","executeScript","response","encodedData","decode","decoded","sendTransaction","wait","transactionId","waitMethod","statusValue","status","toLowerCase","log","waitForStatus","tx","rawResult","txResult","txId","_exit","deployContract","name","to","contractCode","update","ixContractCode","hexedCode","Buffer","from","toString","ixPayer","singleLine","plugin","typedPlugins","put","[object Object]","found","required","itemType","networkName","options","network","port","endpoint","portBased","accessNode","trimWith","splitBy","text","word","join"],"mappings":"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"}
var e=function(e,t,n){return{label:e,asArgument:t,asInjection:n}},t=function(e){return Array.isArray(e)},n=function(e){return"object"==typeof e},r=function(e){return null==e},i=function(e){return"number"==typeof e},o=function(e){return Number.isInteger(e)},u=function(e){return"string"==typeof e},f=function(e){throw new Error("Type Error: "+e)},c=e("Identity",function(e){return e},function(e){return e}),a=e("UInt",function(e){if(i(e)&&o(e))return{type:"UInt",value:e.toString()};f("Expected Positive Integer for type Unsigned Int")},function(e){return e}),d=e("Int",function(e){if(i(e)&&o(e))return{type:"Int",value:e.toString()};f("Expected Integer for type Int")},function(e){return e}),p=e("UInt8",function(e){if(i(e)&&o(e))return{type:"UInt8",value:e.toString()};f("Expected integer for UInt8")},function(e){return e}),l=e("Int8",function(e){if(i(e)&&o(e))return{type:"Int8",value:e.toString()};f("Expected positive integer for Int8")},function(e){return e}),s=e("UInt16",function(e){if(i(e)&&o(e))return{type:"UInt16",value:e.toString()};f("Expected integer for UInt16")},function(e){return e}),g=e("Int16",function(e){if(i(e)&&o(e))return{type:"Int16",value:e.toString()};f("Expected positive integer for Int16")},function(e){return e}),v=e("UInt32",function(e){if(i(e)&&o(e))return{type:"UInt32",value:e.toString()};f("Expected integer for UInt32")},function(e){return e}),y=e("Int32",function(e){if(i(e)&&o(e))return{type:"Int32",value:e.toString()};f("Expected positive integer for Int32")},function(e){return e}),m=e("UInt64",function(e){if(i(e)&&o(e))return{type:"UInt64",value:e.toString()};f("Expected integer for UInt64")},function(e){return e}),x=e("Int64",function(e){if(i(e)&&o(e))return{type:"Int64",value:e.toString()};f("Expected positive integer for Int64")},function(e){return e}),h=e("UInt128",function(e){if(i(e)&&o(e))return{type:"UInt128",value:e.toString()};f("Expected integer for UInt128")},function(e){return e}),I=e("Int128",function(e){if(i(e)&&o(e))return{type:"Int128",value:e.toString()};f("Expected positive integer for Int128")},function(e){return e}),E=e("UInt256",function(e){if(i(e)&&o(e))return{type:"UInt256",value:e.toString()};f("Expected integer for UInt256")},function(e){return e}),b=e("Int256",function(e){if(i(e)&&o(e))return{type:"Int256",value:e.toString()};f("Expected integer for Int256")},function(e){return e}),U=e("Word8",function(e){if(i(e)&&o(e))return{type:"Word8",value:e.toString()};f("Expected positive number for Word8")},function(e){return e}),S=e("Word16",function(e){if(i(e)&&o(e))return{type:"Word16",value:e.toString()};f("Expected positive number for Word16")},function(e){return e}),F=e("Word32",function(e){if(i(e)&&o(e))return{type:"Word32",value:e.toString()};f("Expected positive number for Word32")},function(e){return e}),A=e("Word64",function(e){if(i(e)&&o(e))return{type:"Word64",value:e.toString()};f("Expected positive number for Word64")},function(e){return e}),w=function(){console.error("\n          %c@onflow/types Deprecation Notice\n          ========================\n\n          Passing in Numbers as values for Fix64 and UFix64 types is deprecated and will cease to work in future releases of @onflow/types.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\n\n          =======================\n        ".replace(/\n\s+/g,"\n").trim(),"font-weight:bold;font-family:monospace;")},j=e("UFix64",function(e){if(u(e)){var t=e.split(".");return 2!==t.length&&f("Expected one decimal but found "+t.length+" in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),(0==t[1].length||t[1].length>8)&&f("Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found "+t[1].length+" digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),{type:"UFix64",value:e}}if(i(e))return w(),{type:"UFix64",value:e.toString()};f("Expected String for UFix64")},function(e){return e}),W=e("Fix64",function(e){if(u(e)){var t=e.split(".");return 2!==t.length&&f("Expected one decimal but found "+t.length+" in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),(0==t[1].length||t[1].length>8)&&f("Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found "+t[1].length+" digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"),{type:"Fix64",value:e}}if(i(e))return w(),{type:"Fix64",value:e.toString()};f("Expected String for Fix64")},function(e){return e}),k=e("String",function(e){if(u(e))return{type:"String",value:e};f("Expected String for type String")},function(e){return e}),P=e("Character",function(e){if(u(e))return{type:"Character",value:e};f("Expected Character for type Character")},function(e){return e}),O=e("Bool",function(e){if("boolean"==typeof e)return{type:"Bool",value:e};f("Expected Boolean for type Bool")},function(e){return e}),R=e("Address",function(e){if(u(e))return{type:"Address",value:e};f("Expected Address for type Address")},function(e){return e}),N=e("Void",function(e){if(!e||r(e))return{type:"Void"};f("Expected Void for type Void")},function(e){return e}),B=function(t){return e("Optional",function(e){return{type:"Optional",value:r(e)?null:t.asArgument(e)}},function(e){return e})},C=e("Reference",function(e){if(n(e))return{type:"Reference",value:e};f("Expected Object for type Reference")},function(e){return e}),D=function(n){return void 0===n&&(n=[]),e("Array",function(e){return{type:"Array",value:t(n)?n.map(function(t,n){return t.asArgument(e[n])}):e.map(function(e){return n.asArgument(e)})}},function(e){return e})},V=function(r){return void 0===r&&(r=[]),e("Dictionary",function(e){if(n(e))return{type:"Dictionary",value:t(r)?r.map(function(t,n){return{key:t.key.asArgument(e[n].key),value:t.value.asArgument(e[n].value)}}):t(e)?e.map(function(e){return{key:r.key.asArgument(e.key),value:r.value.asArgument(e.value)}}):[{key:r.key.asArgument(e.key),value:r.value.asArgument(e.value)}]};f("Expected Object for type Dictionary")},function(e){return e})},G=function(r,i){return void 0===i&&(i=[]),e("Event",function(e){if(n(e))return{type:"Event",value:{id:r,fields:t(i)?i.map(function(t,n){return{name:e.fields[n].name,value:t.value.asArgument(e.fields[n].value)}}):e.fields.map(function(e){return{name:e.name,value:i.value.asArgument(e.value)}})}};f("Expected Object for type Event")},function(e){return e})},T=function(r,i){return void 0===i&&(i=[]),e("Resource",function(e){if(n(e))return{type:"Resource",value:{id:r,fields:t(i)?i.map(function(t,n){return{name:e.fields[n].name,value:t.value.asArgument(e.fields[n].value)}}):e.fields.map(function(e){return{name:e.name,value:i.value.asArgument(e.value)}})}};f("Expected Object for type Resource")},function(e){return e})},q=function(r,i){return void 0===i&&(i=[]),e("Struct",function(e){if(n(e))return{type:"Struct",value:{id:r,fields:t(i)?i.map(function(t,n){return{name:e.fields[n].name,value:t.value.asArgument(e.fields[n].value)}}):e.fields.map(function(e){return{name:e.name,value:i.value.asArgument(e.value)}})}};f("Expected Object for type Struct")},function(e){return e})},z=e("Path",function(e){if(n(e))return u(e.domain)||f("Expected a string for the Path domain but found "+e.domain+". Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path"),"storage"!==e.domain&&"private"!==e.domain&&"public"!==e.domain&&f('Expected either "storage", "private" or "public" as the Path domain but found '+e.domain+". Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path"),u(e.identifier)||f("Expected a string for the Path identifier but found "+e.identifier+". Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path"),{type:"Path",value:{domain:e.domain,identifier:e.identifier}};f("Expected Object for type Path")},function(e){return e});export{R as Address,D as Array,O as Bool,P as Character,V as Dictionary,G as Event,W as Fix64,c as Identity,d as Int,I as Int128,g as Int16,b as Int256,y as Int32,x as Int64,l as Int8,B as Optional,z as Path,C as Reference,T as Resource,k as String,q as Struct,j as UFix64,a as UInt,h as UInt128,s as UInt16,E as UInt256,v as UInt32,m as UInt64,p as UInt8,N as Void,S as Word16,F as Word32,A as Word64,U as Word8,D as _Array};
//# sourceMappingURL=types.modern.js.map

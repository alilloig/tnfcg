{"version":3,"file":"index.modern.js","sources":["../src/config.js","../src/init.js","../src/address.js","../src/crypto.js","../src/utils.js","../src/interaction.js","../src/generated/transactions/createAccount.js","../src/generated/transactions/deployContract.js","../src/generated/transactions/initManager.js","../src/generated/transactions/mintTokens.js","../src/generated/transactions/registerContract.js","../src/generated/transactions/scratch.js","../src/generated/transactions/setBlockOffset.js","../src/generated/transactions/updateContract.js","../src/generated/transactions/index.js","../src/deploy-code.js","../src/generated/contracts/FlowManager.js","../src/generated/scripts/checkManager.js","../src/generated/scripts/getAccountAddress.js","../src/generated/scripts/getBalance.js","../src/generated/scripts/getBlockOffset.js","../src/generated/scripts/getContractAddress.js","../src/generated/scripts/index.js","../src/generated/index.js","../src/manager.js","../src/contract.js","../src/imports.js","../src/file.js","../src/templates.js","../src/flow-token.js","../src/account.js","../src/jest-asserts.js","../src/transformers.js","../src/emulator.js"],"sourcesContent":["/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { flowConfig } from \"@onflow/fcl-config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Get value from provided scope and path.\n * @param scope - scope value.\n * @param path - value path in config (flow.json) file.\n * @param fallback - fallback value.\n * @returns {*} - value at specified scope and path.\n */\nexport const get = (scope, path, fallback) => {\n  if (typeof path === \"string\") return get(scope, path.split(\"/\"), fallback);\n  if (!path.length) return scope;\n  try {\n    const [head, ...rest] = path;\n    return get(scope[head], rest, fallback);\n  } catch (_error) {\n    return fallback;\n  }\n};\n\n/**\n * Set globally available config value.\n * @param {string} key - key to be used to access stored value.\n * @param {string} env - value key in the environment (for example .env file).\n * @param {string} conf - value path in config (flow.json) file.\n * @param fallback - fallback value to be used if env and conf are absent.\n */\nexport const set = (key, env, conf, fallback) => {\n  let value = get(flowConfig(), conf, fallback);\n  if (!value) {\n    value = fallback;\n  }\n  config().put(key, value);\n};\n\n/**\n * Returns config value at specified key.\n * @param key - key to the value.\n * @returns {Promise<*>} - value at specified key.\n */\nexport const getConfigValue = async (key) => {\n  return config().get(key);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { set } from \"./config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Inits framework variables, storing private key of service account and base path\n * where Cadence files are stored.\n * @param {string} basePath - path to the folder with Cadence files to be tested.\n * @param {number} [props.port] - port to use for accessAPI\n * @param {number} [props.pkey] - private key to use for service account in case of collisions\n */\nexport const init = async (basePath, props = {}) => {\n  const { port = 8080 } = props;\n  const { pkey = \"48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902\" } = props;\n\n  set(\"PRIVATE_KEY\", process.env.PK, \"accounts/emulator-account/key\", pkey);\n  set(\n    \"SERVICE_ADDRESS\",\n    process.env.SERVICE_ADDRESS,\n    \"accounts/emulator-account/address\",\n    \"f8d6e0586b0a20c7\",\n  );\n  set(\"BASE_PATH\", process.env.BASE_PATH, \"testing/paths\", basePath);\n\n  config().put(\"accessNode.api\", `http://localhost:${port}`);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ec as EC } from \"elliptic\";\nimport { SHA3 } from \"sha3\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as rlp from \"rlp\";\nimport { config } from \"@onflow/config\";\nimport { sansPrefix, withPrefix } from \"./address\";\nconst ec = new EC(\"p256\");\n\nconst hashMsgHex = (msgHex) => {\n  const sha = new SHA3(256);\n  sha.update(Buffer.from(msgHex, \"hex\"));\n  return sha.digest();\n};\n\nexport const signWithKey = (privateKey, msgHex) => {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n  const sig = key.sign(hashMsgHex(msgHex));\n  const n = 32; // half of signature length?\n  const r = sig.r.toArrayLike(Buffer, \"be\", n);\n  const s = sig.s.toArrayLike(Buffer, \"be\", n);\n  return Buffer.concat([r, s]).toString(\"hex\");\n};\n\nexport const authorization =\n  (addr, keyId = 0) =>\n  async (account = {}) => {\n    const serviceAddress = await config().get(\"SERVICE_ADDRESS\");\n    const pkey = await config().get(\"PRIVATE_KEY\");\n\n    addr = sansPrefix(addr || serviceAddress);\n\n    const signingFunction = async (data) => ({\n      keyId,\n      addr: withPrefix(addr),\n      signature: signWithKey(pkey, data.message),\n    });\n\n    return {\n      ...account,\n      tempId: `${addr}-${keyId}`,\n      addr: fcl.sansPrefix(addr),\n      keyId,\n      signingFunction,\n    };\n  };\n\nexport const pubFlowKey = async () => {\n  const keys = ec.keyFromPrivate(Buffer.from(await config().get(\"PRIVATE_KEY\"), \"hex\"));\n  const publicKey = keys.getPublic(\"hex\").replace(/^04/, \"\");\n  return rlp\n    .encode([\n      Buffer.from(publicKey, \"hex\"), // publicKey hex to binary\n      2, // P256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      3, // SHA3-256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      1000, // give key full weight\n    ])\n    .toString(\"hex\");\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isObject = (arg) => typeof arg === \"object\" && arg !== null;\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { resolveArguments } from \"flow-cadut\";\nimport { authorization } from \"./crypto\";\nimport { getTransactionCode, getScriptCode, defaultsByName } from \"./file\";\nimport { resolveImports, replaceImportAddresses } from \"./imports\";\nimport { getServiceAddress } from \"./manager\";\nimport { isObject } from \"./utils\";\n\nconst DEFAULT_LIMIT = 999;\n\nexport const extractParameters = (ixType) => {\n  return async (params) => {\n    let ixCode, ixName, ixSigners, ixArgs, ixService, ixTransformers, ixLimit;\n\n    if (isObject(params[0])) {\n      const [props] = params;\n      const { name, code, args, signers, transformers, limit, service = false } = props;\n\n      ixService = service;\n\n      if (!name && !code) {\n        throw Error(\"Both `name` and `code` are missing. Provide either of them\");\n      }\n      ixName = name;\n      ixCode = code;\n\n      ixSigners = signers;\n      ixArgs = args;\n      ixTransformers = transformers || [];\n      ixLimit = limit;\n    } else {\n      if (ixType === \"script\") {\n        [ixName, ixArgs, ixLimit, ixTransformers] = params;\n      } else {\n        [ixName, ixSigners, ixArgs, ixLimit, ixTransformers] = params;\n      }\n    }\n\n    // Check that limit is always set\n    ixLimit = ixLimit || DEFAULT_LIMIT;\n\n    if (ixName) {\n      const getIxTemplate = ixType === \"script\" ? getScriptCode : getTransactionCode;\n      ixCode = await getIxTemplate({ name: ixName });\n    }\n\n    // We need a way around to allow initial scripts and transactions for Manager contract\n    let deployedContracts;\n    if (ixService) {\n      deployedContracts = defaultsByName;\n    } else {\n      deployedContracts = await resolveImports(ixCode);\n    }\n\n    const serviceAddress = await getServiceAddress();\n    const addressMap = {\n      ...defaultsByName,\n      ...deployedContracts,\n      FlowManager: serviceAddress,\n    };\n\n    ixCode = replaceImportAddresses(ixCode, addressMap);\n\n    // Apply all the necessary transformations to the code\n    for (const i in ixTransformers) {\n      const transformer = ixTransformers[i];\n      ixCode = await transformer(ixCode);\n    }\n\n    return {\n      code: ixCode,\n      signers: ixSigners,\n      args: ixArgs,\n      limit: ixLimit,\n    };\n  };\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n * @param {string} [props.name] - Name of Cadence template file\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {string} [props.code] - Cadence code of the transaction.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @param {[string]} [props.signers] - list of signers, who will authorize transaction, specified as array of addresses.\n * @returns {Promise<any>}\n */\n\nexport const sendTransaction = async (...props) => {\n  try {\n    const extractor = extractParameters(\"tx\");\n    const { code, args, signers, limit } = await extractor(props);\n\n    const serviceAuth = authorization();\n\n    // set repeating transaction code\n    const ix = [\n      fcl.transaction(code),\n      fcl.payer(serviceAuth),\n      fcl.proposer(serviceAuth),\n      fcl.limit(limit),\n    ];\n\n    // use signers if specified\n    if (signers) {\n      const auths = signers.map((address) => authorization(address));\n      ix.push(fcl.authorizations(auths));\n    } else {\n      // and only service account if no signers\n      ix.push(fcl.authorizations([serviceAuth]));\n    }\n\n    // add arguments if any\n    if (args) {\n      const resolvedArgs = await resolveArguments(args, code);\n      ix.push(fcl.args(resolvedArgs));\n    }\n    const response = await fcl.send(ix);\n    const result = await fcl.tx(response).onceExecuted();\n\n    return [result, null];\n    \n    } catch (e) {\n      return [null, e];\n    }\n};\n\n/**\n * Sends script code for execution. Returns decoded value\n * @param {string} props.code - Cadence code of the script to be submitted.\n * @param {string} props.name - name of the file to source code from.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @returns {Promise<*>}\n */\n\nexport const executeScript = async (...props) => {\n  try {\n    const extractor = extractParameters(\"script\");\n    const { code, args, limit } = await extractor(props);\n\n    const ix = [fcl.script(code), fcl.limit(limit)];\n    // add arguments if any\n    if (args) {\n      const resolvedArgs = await resolveArguments(args, code);\n      ix.push(fcl.args(resolvedArgs));\n    }\n    const response = await fcl.send(ix);\n    const result = await fcl.decode(response);\n    return [result, null];\n    \n  } catch (e) {\n    return [null, e];\n  }\n};\n","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\ntransaction (_ name: String, pubKey: String, manager: Address) {\r\n    prepare( admin: AuthAccount) {\r\n        let newAccount = AuthAccount(payer:admin)\r\n        newAccount.addPublicKey(pubKey.decodeHex())\r\n\r\n        let linkPath = FlowManager.accountManagerPath\r\n        let accountManager = getAccount(manager)\r\n                            .getCapability(linkPath)!\r\n                            .borrow<&FlowManager.Mapper>()!\r\n        \r\n        // Create a record in account database\r\n        let address = newAccount.address\r\n        accountManager.setAddress(name, address: address)\r\n    }\r\n}\r\n\n`;\n\n/**\n* Method to generate cadence code for createAccount transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const createAccountTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `createAccount =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends createAccount transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const createAccount = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await createAccountTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `createAccount =>`);\n  reportMissing(\"signers\", signers.length, 1, `createAccount =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction,\n} from 'flow-cadut'\n\nexport const CODE = `\nimport FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for deployContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const deployContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `deployContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends deployContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const deployContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await deployContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `deployContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `deployContract =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: \"FlowManager\",\n           code: code.decodeHex(),\n        )\n   }\n  }\n`;\n\n/**\n* Method to generate cadence code for initManager transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const initManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `initManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends initManager transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const initManager = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await initManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `initManager =>`);\n  reportMissing(\"signers\", signers.length, 1, `initManager =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for mintTokens transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const mintTokensTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `mintTokens =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends mintTokens transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const mintTokens = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await mintTokensTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `mintTokens =>`);\n  reportMissing(\"signers\", signers.length, 1, `mintTokens =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\ntransaction(name: String, address: Address) {\r\n    prepare(signer: AuthAccount){\r\n        let linkPath = FlowManager.contractManagerPath\r\n        let contractManager = signer\r\n                                .getCapability(linkPath)!\r\n                                .borrow<&FlowManager.Mapper>()!\r\n        contractManager.setAddress(name, address: address)\r\n    }\r\n}\r\n\n`;\n\n/**\n* Method to generate cadence code for registerContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const registerContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `registerContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends registerContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const registerContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await registerContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `registerContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `registerContract =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  transaction{\r\n    prepare(acct: AuthAccount){\r\n        log(acct.address)\r\n    }\r\n}\n`;\n\n/**\n* Method to generate cadence code for scratch transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const scratchTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `scratch =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends scratch transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const scratch = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await scratchTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `scratch =>`);\n  reportMissing(\"signers\", signers.length, 1, `scratch =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for setBlockOffset transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const setBlockOffsetTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `setBlockOffset =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends setBlockOffset transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const setBlockOffset = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await setBlockOffsetTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `setBlockOffset =>`);\n  reportMissing(\"signers\", signers.length, 1, `setBlockOffset =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for updateContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const updateContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `updateContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends updateContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const updateContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await updateContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `updateContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `updateContract =>`);\n\n  return sendTransaction({code, ...props})\n}","import { createAccountTemplate, createAccount } from \"./createAccount\";\nimport { deployContractTemplate, deployContract } from \"./deployContract\";\nimport { initManagerTemplate, initManager } from \"./initManager\";\nimport { mintTokensTemplate, mintTokens } from \"./mintTokens\";\nimport { registerContractTemplate, registerContract } from \"./registerContract\";\nimport { scratchTemplate, scratch } from \"./scratch\";\nimport { setBlockOffsetTemplate, setBlockOffset } from \"./setBlockOffset\";\nimport { updateContractTemplate, updateContract } from \"./updateContract\";\n\nexport default {\n  createAccountTemplate,\n  createAccount,\n  deployContractTemplate,\n  deployContract,\n  initManagerTemplate,\n  initManager,\n  mintTokensTemplate,\n  mintTokens,\n  registerContractTemplate,\n  registerContract,\n  scratchTemplate,\n  scratch,\n  setBlockOffsetTemplate,\n  setBlockOffset,\n  updateContractTemplate,\n  updateContract,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sendTransaction } from \"./interaction\";\nimport { getServiceAddress } from \"./manager\";\nimport { defaultsByName, getContractCode } from \"./file\";\n\nimport txRegistry from \"./generated/transactions\";\nimport { isObject } from \"./utils\";\nimport { extractContractParameters, generateSchema, splitArgs } from \"flow-cadut\";\n\nconst { updateContractTemplate, deployContractTemplate } = txRegistry;\n\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nconst extractParameters = async (params) => {\n  let ixName, ixTo, ixAddressMap, ixArgs, ixUpdate;\n\n  if (isObject(params[0])) {\n    const [props] = params;\n    const { name, to, addressMap, args, update } = props;\n\n    if (!name) {\n      throw Error(\"'name' field is missing\");\n    }\n\n    ixName = name;\n    ixTo = to;\n    ixArgs = args;\n    ixAddressMap = addressMap;\n    ixUpdate = update;\n  } else {\n    [ixName, ixTo, ixAddressMap, ixArgs, ixUpdate] = params;\n  }\n\n  const serviceAddress = await getServiceAddress();\n  const addressMap = {\n    ...defaultsByName,\n    FlowManager: serviceAddress,\n    ...ixAddressMap,\n  };\n\n  return {\n    name: ixName,\n    to: ixTo,\n    args: ixArgs,\n    update: ixUpdate,\n    addressMap,\n  };\n};\n\n/**\n * Deploys a contract by name to specified account\n * Returns transaction result.\n * @param {string} props.to - If no address is supplied, the contract will be deployed to the emulator service account.\n * @param {string} props.name  - The name of the contract to look for. This should match a .cdc file located at the specified `basePath`.\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced.\n * @returns {Promise<any>}\n */\nexport const deployContractByName = async (...props) => {\n  const params = await extractParameters(props);\n  const { to, name, addressMap, args, update = false } = params;\n\n  const resolvedAddress = to || (await getServiceAddress());\n  const contractCode = await getContractCode({ name, addressMap });\n\n  return deployContract({\n    to: resolvedAddress,\n    code: contractCode,\n    name,\n    args,\n    update,\n  });\n};\n\n/**\n * Deploys contract as Cadence code to specified account\n * Returns transaction result.\n * @param {string} props.code - Cadence code for contract to be deployed\n * @param {string} props.to - If no address is supplied, the contract\n * will be deployed to the emulator service account\n * @param {string} props.name  - The name of the contract to look for. This should match\n * a .cdc file located at the specified `basePath`\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced\n */\nexport const deployContract = async (props) => {\n  const { to, code: contractCode, name, args, update } = props;\n\n  // TODO: extract name from contract code\n  const containerAddress = to || (await getServiceAddress());\n  const managerAddress = await getServiceAddress();\n  const hexedCode = hexContract(contractCode);\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let code = update\n    ? await updateContractTemplate(addressMap)\n    : await deployContractTemplate(addressMap);\n\n  let deployArgs = [name, hexedCode, managerAddress];\n\n  const params = await extractContractParameters(contractCode);\n\n  if (args) {\n    deployArgs = deployArgs.concat(args);\n    const schema = generateSchema(params.args).map((item) => splitArgs(item)[0]);\n\n    const argLetter = \"abcdefghijklmnopqrstuvwxyz\";\n    let argList = [];\n    for (let i = 0; i < schema.length; i++) {\n      const value = schema[i];\n      argList.push(`${argLetter[i]}: ${value}`);\n    }\n\n    code = code.replace(\"##ARGS-WITH-TYPES##\", `, ${params.args}`);\n    code = code.replace(\"##ARGS-LIST##\", argList);\n  } else {\n    code = code.replace(\"##ARGS-WITH-TYPES##\", ``);\n    code = code.replace(\"##ARGS-LIST##\", \"\");\n  }\n\n  const signers = [containerAddress];\n\n  return sendTransaction({\n    code,\n    args: deployArgs,\n    signers,\n  });\n};\n","/** pragma type contract **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  deployContract,\n} from 'flow-cadut'\n\nexport const CODE = `\n  pub contract FlowManager {\r\n\r\n    /// Account Manager\r\n    pub event AccountAdded(address: Address)\r\n\r\n    pub struct Mapper {\r\n        pub let accounts: {String: Address}\r\n\r\n        pub fun getAddress(_ name: String): Address? {\r\n            return self.accounts[name]\r\n        }\r\n\r\n        pub fun setAddress(_ name: String, address: Address){\r\n            self.accounts[name] = address\r\n            emit FlowManager.AccountAdded(address: address)\r\n        }\r\n\r\n        init(){\r\n            self.accounts = {}\r\n        }\r\n    }\r\n\r\n    pub fun getAccountAddress(_ name: String): Address?{\r\n        let accountManager = self.account\r\n            .getCapability(self.accountManagerPath)\r\n            .borrow<&FlowManager.Mapper>()!\r\n\r\n        return accountManager.getAddress(name)\r\n    }\r\n\r\n    pub let defaultAccounts: {Address : String}\r\n\r\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\r\n        let alias = self.defaultAccounts[address]!\r\n        return self.getAccountAddress(alias)!\r\n    }\r\n\r\n    pub let accountManagerStorage: StoragePath\r\n    pub let contractManagerStorage: StoragePath\r\n    pub let accountManagerPath: PublicPath\r\n    pub let contractManagerPath: PublicPath\r\n\r\n    /// Environment Manager\r\n    pub event BlockOffsetChanged(offset: UInt64)\r\n\r\n    pub struct MockBlock {\r\n        pub let id: [UInt8; 32]\r\n        pub let height: UInt64\r\n        pub let view: UInt64\r\n        pub let timestamp: UFix64\r\n\r\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\r\n            self.id = id\r\n            self.height = height\r\n            self.view = view\r\n            self.timestamp = timestamp\r\n        }\r\n    }\r\n\r\n    pub fun setBlockOffset(_ offset: UInt64){\r\n        self.blockOffset = offset\r\n        emit FlowManager.BlockOffsetChanged(offset: offset)\r\n    }\r\n\r\n    pub fun getBlockHeight(): UInt64 {\r\n        var block = getCurrentBlock()\r\n        return block.height + self.blockOffset\r\n    }\r\n\r\n    pub fun getBlock(): MockBlock {\r\n        var block =  getCurrentBlock()\r\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\r\n        return mockBlock\r\n    }\r\n\r\n    pub var blockOffset: UInt64;\r\n\r\n\r\n    // Initialize contract\r\n    init(){\r\n        // Environment defaults\r\n        self.blockOffset = 0;\r\n\r\n        // Account Manager initialization\r\n        let accountManager = Mapper()\r\n        let contractManager = Mapper()\r\n\r\n        self.defaultAccounts = {\r\n          0x01: \"Alice\",\r\n          0x02: \"Bob\",\r\n          0x03: \"Charlie\",\r\n          0x04: \"Dave\",\r\n          0x05: \"Eve\"\r\n        }\r\n\r\n        self.accountManagerStorage = /storage/testSuitAccountManager\r\n        self.contractManagerStorage = /storage/testSuitContractManager\r\n\r\n        self.accountManagerPath = /public/testSuitAccountManager\r\n        self.contractManagerPath = /public/testSuitContractManager\r\n        \r\n        // Destroy previously stored values\r\n        self.account.load<Mapper>(from: self.accountManagerStorage)\r\n        self.account.load<Mapper>(from: self.contractManagerStorage)\r\n\r\n        self.account.save(accountManager, to: self.accountManagerStorage)\r\n        self.account.save(contractManager, to: self.contractManagerStorage)\r\n\r\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\r\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\r\n    }\r\n}\r\n \n`;\n\n/**\n* Method to generate cadence code for FlowManager transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const FlowManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `FlowManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Deploys FlowManager transaction to the network\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> args - list of arguments\n* param Array<string> - list of signers\n*/\nexport const  deployFlowManager = async (props) => {\n  const { addressMap = {} } = props;\n  const code = await FlowManagerTemplate(addressMap);\n  const name = \"FlowManager\"\n\n  return deployContract({ code, name, ...props })\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const checkManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `checkManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const checkManager = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await checkManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `checkManager =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\npub fun main(name: String, managerAccount: Address):Address? {\r\n    let manager = getAccount(managerAccount)\r\n    let linkPath = FlowManager.accountManagerPath\r\n    let accountManager = manager\r\n                        .getCapability(linkPath)\r\n                        .borrow<&FlowManager.Mapper>()!\r\n\r\n    return accountManager.getAddress(name)\r\n\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getAccountAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getAccountAddress =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getAccountAddress = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getAccountAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `getAccountAddress =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  // This script reads the balance field of an account's FlowToken Balance\r\n\r\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\r\nimport ExampleToken from 0xTOKENADDRESS\r\n\r\npub fun main(account: Address): UFix64 {\r\n    let acct = getAccount(account)\r\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\r\n        ?? panic(\"Could not borrow Balance reference to the Vault\")\r\n\r\n    return vaultRef.balance\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getBalanceTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBalance =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBalance = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getBalanceTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `getBalance =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getBlockOffsetTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBlockOffset =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBlockOffset = async (props = {}) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getBlockOffsetTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `getBlockOffset =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\npub fun main(name: String, managerAccount: Address):Address? {\r\n    let manager = getAccount(managerAccount)\r\n    let linkPath = FlowManager.contractManagerPath\r\n    let contractManager = manager\r\n                        .getCapability(linkPath)\r\n                        .borrow<&FlowManager.Mapper>()!\r\n\r\n    return contractManager.getAddress(name)\r\n\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getContractAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getContractAddress =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getContractAddress = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getContractAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `getContractAddress =>`);\n\n  return executeScript({code, ...props})\n}","import { checkManagerTemplate, checkManager } from \"./checkManager\";\nimport { getAccountAddressTemplate, getAccountAddress } from \"./getAccountAddress\";\nimport { getBalanceTemplate, getBalance } from \"./getBalance\";\nimport { getBlockOffsetTemplate, getBlockOffset } from \"./getBlockOffset\";\nimport { getContractAddressTemplate, getContractAddress } from \"./getContractAddress\";\nimport { getManagerAddressTemplate, getManagerAddress } from \"./getManagerAddress\";\n\nexport default {\n  checkManagerTemplate,\n  checkManager,\n  getAccountAddressTemplate,\n  getAccountAddress,\n  getBalanceTemplate,\n  getBalance,\n  getBlockOffsetTemplate,\n  getBlockOffset,\n  getContractAddressTemplate,\n  getContractAddress,\n  getManagerAddressTemplate,\n  getManagerAddress,\n};\n","import contracts from \"./contracts\";\nimport scripts from \"./scripts\";\nimport transactions from \"./transactions\";\n\nexport default {\n  contracts,\n  scripts,\n  transactions,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { config } from \"@onflow/config\";\nimport { withPrefix } from \"./address\";\nimport { hexContract } from \"./deploy-code\";\nimport registry from \"./generated\";\n\nexport const initManager = async () => {\n  const code = await registry.transactions.initManagerTemplate();\n  const contractCode = await registry.contracts.FlowManagerTemplate();\n  const hexedContract = hexContract(contractCode);\n  const args = [hexedContract];\n\n  await sendTransaction({\n    code,\n    args,\n    service: true,\n  });\n};\n\nexport const getServiceAddress = async () => {\n  return withPrefix(await config().get(\"SERVICE_ADDRESS\"));\n};\n\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const addressMap = {\n    FlowManager: serviceAddress,\n  };\n\n  const code = await registry.scripts.checkManagerTemplate(addressMap);\n\n  let [result, e] = await executeScript({\n    code,\n    service: true,\n  });\n  if (e && result === null) {\n    await initManager();\n  }\n\n  return getServiceAddress();\n};\n\n// TODO: replace method above after Cadence will allow to get contracts list on PublicAccount\n/*\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const code = `\n    pub fun main(address: Address):Bool {\n      return getAccount(address).contracts.get(\"FlowManager\") != null\n    }\n  `;\n  const result = await executeScript({ code, args: [serviceAddress] });\n\n  if (!result) {\n    await initManager();\n  }\n\n  return serviceAddress;\n};\n */\n\nexport const getBlockOffset = async () => {\n  const FlowManager = await getManagerAddress();\n  const code = await registry.scripts.getBlockOffsetTemplate({ FlowManager });\n  return executeScript({ code });\n};\n\nexport const setBlockOffset = async (offset) => {\n  const FlowManager = await getManagerAddress();\n\n  const args = [offset];\n  const code = await registry.transactions.setBlockOffsetTemplate({ FlowManager });\n  const payer = [FlowManager];\n\n  return sendTransaction({ code, args, payer });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getManagerAddress } from \"./manager\";\nimport { executeScript } from \"./interaction\";\nimport { defaultsByName } from \"./file\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of the account where contract specified by name is currently deployed\n * @param {string} name - name of the account to look for\n * @param {boolean} [useDefaults=false] - whether we shall look into default addressed first\n * @returns {Promise<string>}\n */\nexport const getContractAddress = async (name, useDefaults = false) => {\n  // TODO: Maybe try to automatically deploy contract? 🤔\n\n  if (useDefaults) {\n    const defaultContract = defaultsByName[name];\n    if (defaultContract !== undefined) {\n      return defaultContract;\n    }\n  }\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  const code = await registry.scripts.getContractAddressTemplate(addressMap);\n  const args = [name, managerAddress];\n  const [contractAddress] = await executeScript({\n    code,\n    args,\n    service: true,\n  });\n\n  return contractAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getContractAddress } from \"./contract\";\nimport { defaultsByName } from \"./file\";\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\nexport const replaceImports = (code, addressMap) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract) => {\n    const newAddress = addressMap instanceof Function ? addressMap(contract) : addressMap[contract];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Resolves import addresses defined in code template\n * @param {string} code - Cadence template code.\n * @returns {{string:string}} - name/address map\n */\nexport const resolveImports = async (code) => {\n  const addressMap = {};\n  const importList = extractImports(code);\n  for (const key in importList) {\n    if (defaultsByName[key]) {\n      addressMap[key] = defaultsByName[key];\n    } else {\n      const address = await getContractAddress(key);\n      addressMap[key] = address;\n    }\n  }\n  return addressMap;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { config } from \"@onflow/config\";\n\nimport { replaceImportAddresses } from \"./imports\";\nimport { isObject } from \"./utils\";\n\nexport const readFile = (path) => {\n  return fs.readFileSync(path, \"utf8\");\n};\n\n/**\n * Address map with access by name for contracts deployed to emulator by default.\n * @type {{FlowFees: string, FlowToken: string, FungibleToken: string}}\n */\nexport const defaultsByName = {\n  FlowToken: \"0x0ae53cb6e3f42a79\",\n  FungibleToken: \"0xee82856bf20e2aa6\",\n  FlowFees: \"0xe5a8b7f23e8b548f\",\n  FlowStorageFees: \"0xf8d6e0586b0a20c7\",\n};\n\n/**\n * Address map with access by address for contracts deployed to emulator by default.\n * @type {{\"0xe5a8b7f23e8b548f\": string, \"0xf8d6e0586b0a20c7\": string, \"0xee82856bf20e2aa6\": string, \"0x0ae53cb6e3f42a79\": string}}\n */\nexport const defaultsByAddress = {\n  \"0xe5a8b7f23e8b548f\": \"0xe5a8b7f23e8b548f\", // FlowFees\n  \"0xf8d6e0586b0a20c7\": \"0xf8d6e0586b0a20c7\", // FlowStorageFees\n  \"0x0ae53cb6e3f42a79\": \"0x0ae53cb6e3f42a79\", // FlowToken\n  \"0xee82856bf20e2aa6\": \"0xee82856bf20e2aa6\", // FungibleToken\n};\n\nconst SCRIPT = \"scripts\";\nconst TRANSACTION = \"transactions\";\nconst CONTRACT = \"contracts\";\n\nexport const templateType = {\n  SCRIPT,\n  TRANSACTION,\n  CONTRACT,\n};\n\nexport const getPath = async (name, type = TRANSACTION) => {\n  const configBase = await config().get(\"BASE_PATH\");\n\n  // We can simply overwrite \"configBase\" variable, but I believe it's better to leave it unchanged\n  let basePath = configBase;\n\n  // It's possible to pass a set of paths via object, so we need to check if that's the case\n  if (isObject(configBase)) {\n    const typePath = configBase[type];\n\n    // if there is a specific path for this type, then we shall resolve it\n    if (typePath) {\n      return path.resolve(typePath, `./${name}.cdc`);\n    }\n\n    // otherwise use \"base\" value\n    basePath = configBase.base;\n  }\n\n  return path.resolve(basePath, `./${type}/${name}.cdc`);\n};\n\n/**\n * Returns Cadence template for specified file. Replaces imports using provided address map\n * @param file - name of the file to look for.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [byAddress=false] - flag to indicate if address map is address to address type.\n * @returns {string}\n */\nexport const getTemplate = (file, addressMap = {}, byAddress = false) => {\n  const rawCode = readFile(file);\n\n  const defaults = byAddress ? defaultsByAddress : defaultsByName;\n\n  return addressMap\n    ? replaceImportAddresses(rawCode, {\n        ...defaults,\n        ...addressMap,\n      })\n    : rawCode;\n};\n\n/**\n * Returns contract template using name of the file in \"contracts\" folder containing the code.\n * @param name - name of the contract template in \"contract\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getContractCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.CONTRACT);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns transaction template using name of the file in \"transactions\" folder containing the code.\n * @param name - name of the transaction template in \"transactions\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getTransactionCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.TRANSACTION);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns script template using name of the file in \"scripts\" folder containing the code.\n * @param name - name of the script template in \"scripts\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getScriptCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.SCRIPT);\n  return getTemplate(path, addressMap);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport registry from \"./generated\";\nimport { defaultsByName } from \"./file\";\n\nconst FlowTokenMap = { ExampleToken: defaultsByName.FlowToken };\n\nconst lowerFirst = (name) => {\n  return name[0].toLowerCase() + name.slice(1);\n};\n\nexport const makeMintTransaction = async (name) => {\n  const code = await registry.transactions.mintTokensTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n\nexport const makeGetBalance = async (name) => {\n  const code = await registry.scripts.getBalanceTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { defaultsByName } from \"./file\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { makeGetBalance, makeMintTransaction } from \"./templates\";\n\n/**\n * Returns current FlowToken balance of account specified by address\n * @param {string} address - address of account to check\n * @returns {Promise<*>}\n */\nexport const getFlowBalance = async (address) => {\n  const raw = await makeGetBalance(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [address];\n\n  return executeScript({ code, args });\n};\n\n/**\n * Sends transaction to mint specified amount of FlowToken and send it to recipient.\n * Returns result of the transaction.\n * @param {string} recipient - address of recipient account\n * @param {string} amount - amount to mint and send\n * @returns {Promise<*>}\n */\nexport const mintFlow = async (recipient, amount) => {\n  const raw = await makeMintTransaction(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [recipient, amount];\n  return sendTransaction({ code, args });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { pubFlowKey } from \"./crypto\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { getManagerAddress } from \"./manager\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of account specified by name. If account with that name doesn't exist it will be created\n * and assigned provided name as alias\n * @param {string} accountName - name of the account\n * @returns {Promise<string|*>}\n */\nexport const getAccountAddress = async (accountName) => {\n  const name = accountName || `deployment-account-${(Math.random() * Math.pow(10, 8)).toFixed(0)}`;\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let accountAddress;\n\n  const code = await registry.scripts.getAccountAddressTemplate(addressMap);\n\n  const args = [name, managerAddress];\n\n  const [result] = await executeScript({\n    code,\n    args,\n    service: true,\n  });\n  accountAddress = result;\n\n  if (accountAddress === null) {\n    const code = await registry.transactions.createAccountTemplate(addressMap);\n    const publicKey = await pubFlowKey();\n    const args = [name, publicKey, managerAddress];\n\n    const [result] = await sendTransaction({\n      code,\n      args,\n    });\n    const { events } = result;\n    const event = events.find((event) => event.type.includes(\"AccountAdded\"));\n    accountAddress = event.data.address;\n  }\n  return accountAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { expect } = global;\n\n/**\n * Return Promise from passed interaction\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*>\n * */\nexport const promise = async (ix) => {\n  if (typeof ix === \"function\") {\n    return await ix();\n  }\n  return await ix;\n};\n\n/**\n * Ensure transaction did not throw and sealed.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - transaction result\n * */\nexport const shallPass = async (ix) => {\n  const wrappedInteraction = promise(ix);\n\n  let result = await wrappedInteraction;\n\n  let resolvedStatus;\n  let resolvedErrorMessage;\n  if (Array.isArray(result)) {\n    const { status, errorMessage } = result[0];\n    resolvedStatus = status;\n    resolvedErrorMessage = errorMessage;\n  } else {\n    const { status, errorMessage } = result;\n    resolvedStatus = status;\n    resolvedErrorMessage = errorMessage;\n  }\n\n  await expect(resolvedStatus).toBe(4);\n  await expect(resolvedErrorMessage).toBe(\"\");\n\n  return promise(ix);\n};\n\n/**\n * Ensure interaction did not throw and return result of it\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - result of interaction\n * */\nexport const shallResolve = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  return wrappedInteraction;\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallRevert = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  let resolvedError;\n  try {\n    const [result, error] = await wrappedInteraction;\n    resolvedError = error;\n    await expect(result).toBe(null);\n  } catch (error) {\n    resolvedError = \"ERROR!\";\n  }\n  await expect(resolvedError).not.toBe(null);\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallThrow = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  let resolvedError;\n  try {\n    const [result, error] = await wrappedInteraction;\n    resolvedError = error;\n    await expect(result).toBe(null);\n  } catch (error) {\n    resolvedError = \"ERROR!\";\n    await expect(wrappedInteraction).rejects.toThrow();\n  }\n  await expect(resolvedError).not.toBe(null);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getServiceAddress } from \"./manager\";\n\nexport const importManager = async () => {\n  const serviceAddress = await getServiceAddress();\n  return `import FlowManager from ${serviceAddress}`;\n};\n\nexport const importExists = (contractName, code) => {\n  return new RegExp(`import\\\\s+${contractName}`).test(code);\n};\n\nexport const builtInMethods = async (code) => {\n  let injectedImports = code;\n  if (!importExists(\"FlowManager\", code)) {\n    const imports = await importManager();\n    injectedImports = `\n      ${imports}\n      ${code}  \n  `;\n  }\n  return injectedImports.replace(/getCurrentBlock\\(\\).height/g, `FlowManager.getBlockHeight()`);\n};\n\nconst addressToIndex = (address) => {\n  return parseInt(address) - 1;\n};\n\nconst addressToAlias = (accounts) => (address) => accounts[addressToIndex(address)];\n\nexport const playgroundImport = (accounts) => async (code) => {\n  let injectedImports = code;\n  if (!importExists(\"FlowManager\", code)) {\n    const imports = await importManager();\n    injectedImports = `\n      ${imports}\n      ${code}  \n  `;\n  }\n  return injectedImports.replace(/(?:getAccount\\()(.+)(?:\\))/g, (match, g1) => {\n    const alias = addressToAlias(accounts)(g1);\n    if (!alias) {\n      return `getAccount(FlowManager.resolveDefaultAccounts(${g1}))`;\n    }\n    return `getAccount(FlowManager.getAccountAddress(\"${alias}\"))`;\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { spawn } = require(\"child_process\");\n\nconst DEFAULT_HTTP_PORT = 8080;\nconst DEFAULT_GRPC_PORT = 3569;\n\n/** Class representing emulator */\nexport class Emulator {\n  /**\n   * Create an emulator.\n   */\n  constructor() {\n    this.initialized = false;\n    this.logging = false;\n    this.logProcessor = (item) => item;\n  }\n\n  /**\n   * Set logging flag.\n   * @param {boolean} logging - whether logs shall be printed\n   */\n  setLogging(logging) {\n    this.logging = logging;\n  }\n\n  /**\n   * Log message with a specific type.\n   * @param {*} message - message to put into log output\n   * @param {\"log\"|\"error\"} type - type of the message to output\n   */\n  log(message, type = \"log\") {\n    this.logging && console[type](message);\n  }\n\n  extractKeyValue(str) {\n    // TODO: add regexp check that it conforms to necessary pattern\n    const [key, value] = str.split(\"=\");\n    if (value.includes(\"LOG\")) {\n      return { key, value: value.replace(`\"\\x1b[1;34m`, `\"\\x1b[1[34m`) };\n    }\n    return { key, value };\n  }\n\n  parseDataBuffer(data) {\n    const match = data.toString().match(/((\\w+=\\w+)|(\\w+=\".*?\"))/g);\n    if (match) {\n      const pairs = match.map((item) => item.replace(/\"/g, \"\"));\n      return pairs.reduce((acc, pair) => {\n        const { key, value } = this.extractKeyValue(pair);\n        acc[key] = value;\n        return acc;\n      }, {});\n    }\n    return {};\n  }\n\n  /**\n   * Start emulator.\n   * @param {number} port - port to use for accessApi\n   * @param {boolean} logging - whether logs shall be printed\n   * @returns Promise<*>\n   */\n  async start(port = DEFAULT_HTTP_PORT, logging = false) {\n    const offset = port - DEFAULT_HTTP_PORT;\n    let grpc = DEFAULT_GRPC_PORT + offset;\n\n    this.logging = logging;\n    this.filters = [];\n    this.process = spawn(\"flow\", [\"emulator\", \"-v\", \"--http-port\", port, \"--port\", grpc]);\n    this.logProcessor = (item) => item;\n\n    return new Promise((resolve, reject) => {\n      this.process.stdout.on(\"data\", (data) => {\n        // const buf = this.parseDataBuffer(data);\n\n        if (this.filters.length > 0) {\n          for (let i = 0; i < this.filters.length; i++) {\n            const filter = this.filters[i];\n            if (data.includes(`${filter}`)) {\n              // TODO: use this.log to output string with this.logProcessor and type\n              // TODO: Fix output colors: https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\n              // this.log(`LOG: ${data.toString().replace(/\\\\x1b\\[1;34m/, \"\\x1b[36m\")}`);\n              this.log(`LOG: ${data}`);\n              break;\n            }\n          }\n        } else {\n          this.log(`LOG: ${data}`);\n        }\n        if (data.includes(\"Starting HTTP server\")) {\n          this.log(\"EMULATOR IS UP! Listening for events!\");\n          this.initialized = true;\n          resolve(true);\n        }\n      });\n\n      this.process.stderr.on(\"data\", (data) => {\n        this.log(`ERROR: ${data}`, \"error\");\n        this.initialized = false;\n        reject();\n      });\n\n      this.process.on(\"close\", (code) => {\n        this.log(`emulator exited with code ${code}`);\n        this.initialized = false;\n        resolve(false);\n      });\n    });\n  }\n\n  /**\n   * Clear all log filters.\n   * @returns void\n   **/\n  clearFilters() {\n    this.filters = [];\n  }\n\n  /**\n   * Remove specific type of log filter.\n   * @param {(debug|info|warning)} type - type of message\n   * @returns void\n   **/\n  removeFilter(type) {\n    this.filters = this.filters((item) => item !== type);\n  }\n\n  /**\n   * Add log filter.\n   * @param {(debug|info|warning)} type type - type of message\n   * @returns void\n   **/\n  addFilter(type) {\n    if (!this.filters.includes(type)) {\n      this.filters.push(type);\n    }\n  }\n\n  /**\n   * Stop emulator.\n   * @returns Promise<*>\n   */\n  async stop() {\n    // eslint-disable-next-line no-undef\n    return new Promise((resolve) => {\n      this.process.kill();\n      setTimeout(() => {\n        this.initialized = false;\n        resolve(false);\n      }, 50);\n    });\n  }\n}\n\n/** Singleton instance */\nexport default new Emulator();\n"],"names":["get","scope","path","fallback","split","length","head","rest","_error","set","key","env","conf","value","flowConfig","config","put","getConfigValue","async","init","basePath","props","port","pkey","process","sansPrefix","address","replace","withPrefix","ec","EC","signWithKey","privateKey","msgHex","sig","keyFromPrivate","Buffer","from","sign","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","authorization","addr","keyId","account","serviceAddress","tempId","fcl","signingFunction","signature","data","message","isObject","arg","extractParameters","ixType","ixCode","ixName","ixSigners","ixArgs","ixService","ixTransformers","ixLimit","deployedContracts","params","name","code","args","signers","transformers","limit","service","Error","getIxTemplate","getScriptCode","getTransactionCode","defaultsByName","resolveImports","getServiceAddress","addressMap","FlowManager","replaceImportAddresses","i","transformer","sendTransaction","extractor","serviceAuth","ix","transaction","payer","proposer","auths","map","push","authorizations","resolvedArgs","resolveArguments","response","send","tx","onceExecuted","e","executeScript","script","decode","CODE","createAccountTemplate","fullMap","getEnvironment","reportMissingImports","deployContractTemplate","initManagerTemplate","mintTokensTemplate","registerContractTemplate","scratchTemplate","setBlockOffsetTemplate","updateContractTemplate","createAccount","reportMissing","mintTokens","registerContract","scratch","updateContract","txRegistry","hexContract","contract","deployContractByName","ixTo","ixAddressMap","ixUpdate","to","resolvedAddress","contractCode","getContractCode","deployContract","containerAddress","managerAddress","hexedCode","deployArgs","extractContractParameters","schema","generateSchema","item","splitArgs","argLetter","argList","transactions","getManagerAddress","registry","result","initManager","getBlockOffset","setBlockOffset","offset","getContractAddress","useDefaults","defaultContract","undefined","contractAddress","REGEXP_IMPORT","getPairs","line","filter","collect","acc","extractImports","includes","reduce","byName","match","imp","_","Function","importList","FlowToken","FungibleToken","FlowFees","FlowStorageFees","defaultsByAddress","getPath","type","configBase","typePath","resolve","base","getTemplate","file","byAddress","rawCode","fs","readFileSync","readFile","FlowTokenMap","ExampleToken","lowerFirst","toLowerCase","slice","getFlowBalance","raw","makeGetBalance","mintFlow","recipient","amount","makeMintTransaction","getAccountAddress","accountName","Math","random","pow","toFixed","accountAddress","publicKey","getPublic","rlp","encode","pubFlowKey","events","find","event","expect","global","promise","shallPass","wrappedInteraction","resolvedStatus","resolvedErrorMessage","Array","isArray","status","errorMessage","toBe","shallResolve","shallRevert","resolvedError","error","not","shallThrow","rejects","toThrow","builtInMethods","injectedImports","contractName","RegExp","test","importExists","importManager","spawn","require","constructor","this","initialized","logging","logProcessor","setLogging","log","console","extractKeyValue","str","parseDataBuffer","pair","grpc","filters","Promise","reject","stdout","on","stderr","clearFilters","removeFilter","addFilter","kill","setTimeout"],"mappings":"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"}
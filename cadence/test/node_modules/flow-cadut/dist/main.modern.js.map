{"version":3,"file":"main.modern.js","sources":["../src/env.js","../src/imports.js","../src/fixer.js","../src/strings.js","../src/parser.js","../src/type-checker.js","../src/plugins.js","../src/args.js","../src/interactions.js"],"sourcesContent":["/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { config } from \"@onflow/config\";\n\nexport const DEPLOYED_CONTRACTS = {\n  emulator: {\n    FlowToken: \"0xee82856bf20e2aa6\",\n    FungibleToken: \"0x0ae53cb6e3f42a79\",\n  },\n  testnet: {\n    FlowToken: \"0x7e60df042a9c0868\",\n    FungibleToken: \"0x9a0766d93b6608b7\",\n    LockedTokens: \"0x95e019a17d0e23d7\",\n    StakingProxy: \"0x7aad92e5a0715d21\",\n    FUSD: \"0xe223d8a629e49c68\",\n  },\n  mainnet: {\n    FlowToken: \"0x1654653399040a61\",\n    FungibleToken: \"0xf233dcee88fe0abe\",\n    LockedTokens: \"0x8d0e87b65159ae63\",\n    StakingProxy: \"0x62430cf28c26d095\",\n    FUSD: \"0x3c5959b568896393\",\n  },\n};\n\nexport const ACCESS_NODES = {\n  mainnet: \"https://access-mainnet-beta.onflow.org\",\n  testnet: \"https://access-testnet.onflow.org\",\n  emulator: \"http://localhost:8080\",\n};\n\nexport const getEnvironmentName = async () => {\n  return (await config().get(\"ix.env\")) || \"emulator\";\n};\n\nexport const getEnvironment = async () => {\n  const env = await getEnvironmentName();\n  return DEPLOYED_CONTRACTS[env] || DEPLOYED_CONTRACTS.emulator;\n};\n\nexport const setEnvironment = async (networkName = \"emulator\", options = {}) => {\n  const network = networkName.toLowerCase();\n\n  if (!DEPLOYED_CONTRACTS[network]) {\n    throw new Error(\n      `Provided value \"${network}\" is not supported. Try \"emulator\", \"testnet\" or \"mainnet\". Default: \"emulator\"`\n    );\n  }\n\n  const { port, endpoint, limit } = options;\n  const portBased =\n    network === \"emulator\" && port ? `http://localhost:${port}` : ACCESS_NODES[network];\n  const accessNode = endpoint || portBased;\n\n  await config().put(\"ix.env\", network);\n\n  if (limit) {\n    await config().put(\"ix.executionLimit\", limit);\n  }\n\n  await config().put(\"accessNode.api\", accessNode);\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\n/**\n * Returns list of missing imports.\n * @param {string} code - template cadence code\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n */\nexport const missingImports = (code, addressMap = {}) => {\n  const importsList = extractImports(code);\n  const missing = [];\n\n  for (const key in importsList) {\n    if (!addressMap[key] && Object.prototype.hasOwnProperty.call(importsList, key)) {\n      missing.push(key);\n    }\n  }\n\n  return missing;\n};\n\n/**\n * Reports missing imports.\n * @param {Array.<string>} list - list of missing imports\n * @param {string} prefix - error message prefix\n */\nexport const report = (list = [], prefix = \"\") => {\n  const errorMessage = `Missing imports for contracts:`;\n  const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n  console.error(message, list);\n};\n\n/**\n * Reports missing imports.\n * @param {string} code - template cadence code\n * @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n * @param {string} [prefix] - prefix to add to error message\n */\nexport const reportMissingImports = (code, addressMap, prefix = \"\") => {\n  const list = missingImports(code, addressMap);\n  if (list.length > 0) {\n    report(list, prefix);\n  }\n};\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n\n    // If the address is not inside addressMap we shall not alter import statement\n    const validAddress = newAddress || address;\n    return `${imp}${contract} from ${validAddress}`;\n  });\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n\nexport const padAddress = (address) => {\n  return \"0x\" + sansPrefix(address).padStart(16, \"0\");\n};\n\nexport const toFixedValue = (val) => parseFloat(val).toFixed(8);\n\nexport const domains = [\"public\", \"private\", \"storage\"];\n\nexport const parsePath = (path) => {\n  if (path.startsWith(\"/\")) {\n    const parts = path.slice(1).split(\"/\");\n    if (parts.length !== 2) {\n      throw Error(\"Incorrect Path - identifier missing\");\n    }\n    if (!domains.includes(parts[0])){\n      throw Error(\"Incorrect Path - wrong domain\")\n    }\n    const [domain, identifier] = parts;\n    return { domain, identifier };\n  }\n  throw Error(\"Incorrect Path - shall start with `/`\");\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const capitalizeFirstLetter = (input) => {\n  const [first] = input.split(\"\");\n  return first.toUpperCase() + input.slice(1);\n};\n\nexport const underscoreToCamelCase = (text) => {\n  return text\n    .replace(/-/g, \"_\")\n    .split(\"_\")\n    .map((word, i) => (i > 0 ? capitalizeFirstLetter(word) : word))\n    .join(\"\");\n};\n\nexport const trimAndSplit = (input, trimWith, splitBy) => {\n  if (splitBy) {\n    return input.replace(trimWith, \"\").split(splitBy);\n  }\n  return input.replace(trimWith, \"\").split(getSplitCharacter(input));\n};\n\nexport const getSplitCharacter = (input) => {\n  switch (true) {\n    case input.indexOf(\"//\") >= 0:\n      return \"//\";\n    case input.indexOf(\"/\") >= 0:\n      return \"/\";\n    case input.indexOf(\"\\\\\") >= 0:\n      return \"\\\\\";\n    default:\n      return \"\";\n  }\n};\n\nexport const collapseSpaces = (input) => input.replace(/\\s+/g, \" \");\nexport const removeSpaces = (input) => input.replace(/\\s+/g, \"\");\nexport const stripNewLines = (input) => input.replace(/\\r\\n|\\n|\\r/g, \" \");\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { collapseSpaces } from \"./strings\";\n\nexport const CONTRACT = \"contract\";\nexport const TRANSACTION = \"transaction\";\nexport const SCRIPT = \"script\";\nexport const UNKNOWN = \"unknown\";\n\nexport const generateSchema = (argsDefinition) =>\n  argsDefinition\n    .split(\",\")\n    .map((item) => item.replace(/\\s*/g, \"\"))\n    .filter((item) => item !== \"\");\n\nexport const stripComments = (code) => {\n  const commentsRegExp = /(\\/\\*[\\s\\S]*?\\*\\/)|(\\/\\/.*)/g;\n  return code.replace(commentsRegExp, \"\");\n};\n\nexport const extract = (code, keyWord) => {\n  const noComments = stripComments(code);\n  const target = collapseSpaces(noComments.replace(/[\\n\\r]/g, \"\"));\n\n  if (target) {\n    const regexp = new RegExp(keyWord, \"g\");\n    const match = regexp.exec(target);\n\n    if (match) {\n      if (match[1] === \"\") {\n        return [];\n      }\n      return generateSchema(match[1]);\n    }\n  }\n  return [];\n};\n\nexport const extractSigners = (code) => {\n  return extract(code, `(?:prepare\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractScriptArguments = (code) => {\n  return extract(code, `(?:fun\\\\s+main\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractTransactionArguments = (code) => {\n  return extract(code, `(?:transaction\\\\s*\\\\(\\\\s*)([^\\\\)]*)(?:\\\\))`);\n};\n\nexport const extractContractName = (code) => {\n  const contractNameMatcher = /\\w+\\s+contract\\s+(?:interface)*\\s*(\\w*)/g;\n  const noComments = stripComments(code);\n  const singleLine = noComments.replace(/\\r\\n|\\n|\\r/g, \" \");\n  const matches = contractNameMatcher.exec(singleLine);\n\n  if (matches.length < 2) {\n    throw new Error(\"Contract Error: can't find name of the contract\");\n  }\n\n  return matches[1];\n};\n\nexport const extractContractParameters = (code) => {\n  const complexMatcher = /(resource|struct)\\s+\\w+\\s*{[\\s\\S]+?}/g;\n  const contractNameMatcher =\n    /(?:access\\(\\w+\\)|pub)\\s+contract\\s+(?:interface)*\\s*(\\w*)(\\s*{[.\\s\\S]*init\\s*\\((.*?)\\)[.\\s\\S]*})?/g;\n\n  const noComments = stripComments(code);\n  const noComplex = noComments.replace(complexMatcher, \"\");\n  const matches = contractNameMatcher.exec(noComplex);\n\n  if (matches.length < 2) {\n    throw new Error(\"Contract Error: can't find name of the contract\");\n  }\n\n  return {\n    contractName: matches[1],\n    args: matches[3] || \"\",\n  };\n};\n\nexport const getTemplateInfo = (template) => {\n  const contractMatcher = /\\w+\\s+contract\\s+(\\w*\\s*)\\w*/g;\n  const transactionMatcher = /transaction\\s*(\\(\\s*\\))*\\s*/g;\n  const scriptMatcher = /pub\\s+fun\\s+main\\s*/g;\n\n  const code = stripComments(template);\n\n  if (transactionMatcher.test(code)) {\n    const signers = extractSigners(code);\n    const args = extractTransactionArguments(code);\n    return {\n      type: TRANSACTION,\n      signers: signers.length,\n      args: args,\n    };\n  }\n\n  if (scriptMatcher.test(code)) {\n    const args = extractScriptArguments(code);\n    return {\n      type: SCRIPT,\n      args: args,\n    };\n  }\n\n  if (contractMatcher.test(code)) {\n    const { contractName, args } = extractContractParameters(code);\n    return {\n      type: CONTRACT,\n      signers: 1,\n      args,\n      contractName,\n    };\n  }\n\n  return {\n    type: UNKNOWN,\n  };\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const wrongType = (type) => !type || typeof type != \"string\";\n\nexport const isBasicNumType = (type) => {\n  if (wrongType(type)) return false;\n  return type.startsWith(\"Int\") || type.startsWith(\"UInt\") || type.startsWith(\"Word\");\n};\n\nexport const isFixedNumType = (type) => {\n  if (wrongType(type)) return false;\n  return type.startsWith(\"Fix64\") || type.startsWith(\"UFix64\");\n};\n\nexport const isString = (type) => type === \"String\";\nexport const isCharacter = (type) => type === \"Character\";\nexport const isBoolean = (type) => type === \"Bool\";\nexport const isAddress = (type) => type === \"Address\" || type === \"Address?\";\nexport const isPath = (type) => type === \"Path\" || type === \"Path?\";\n\nexport const isBasicType = (type) => {\n  if (wrongType(type)) return false;\n\n  let fixedType = type.endsWith(\"?\") ? type.slice(0, -1) : type;\n  return (\n    isBasicNumType(fixedType) ||\n    isString(fixedType) ||\n    isCharacter(fixedType) ||\n    isBoolean(fixedType)\n  );\n};\n\nexport const isArray = (type) => {\n  if (wrongType(type)) return false;\n\n  const clearType = type.replace(/\\s/g, \"\");\n  return clearType.startsWith(\"[\") && clearType.endsWith(\"]\");\n};\n\nexport const isDictionary = (type) => {\n  if (wrongType(type)) return false;\n\n  const clearType = type.replace(/\\s/g, \"\");\n  return clearType.startsWith(\"{\") && clearType.endsWith(\"}\");\n};\n\nexport const isComplexType = (type) => isArray(type) || isDictionary(type);\n","import { config } from \"@onflow/fcl\";\n\nexport const PLUGIN_TYPES = {\n  ARGUMENT: \"argument\",\n};\n\nexport const registerPlugin = async (plugin) => {\n  const { type } = plugin;\n  const registeredPlugins = await config().get(\"ix.plugins\");\n  const plugins = registeredPlugins || {};\n  const typedPlugins = plugins[type] || [];\n\n  await config().put(\"ix.plugins\", {\n    ...plugins,\n    [type]: [...typedPlugins, plugin],\n  });\n};\n\nexport const getPlugins = async (type) => {\n  const registeredPlugins = await config().get(\"ix.plugins\");\n  const plugins = registeredPlugins || {};\n  const byType = plugins[type];\n\n  if (byType && byType.length > 0) {\n    return byType;\n  }\n  return false;\n};\n\nexport const applyPlugins = async (props, plugins) => {\n  let type = props.type;\n  let value = props.value;\n\n  for (let i = 0; i < plugins.length; i++) {\n    const { resolver } = plugins[i];\n    const result = await resolver(type, value);\n    type = result.type;\n    value = result.value;\n  }\n\n  return { type, value };\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as t from \"@onflow/types\";\nimport * as fcl from \"@onflow/fcl\";\n\nimport { parsePath, toFixedValue, withPrefix } from \"./fixer\";\nimport { getTemplateInfo } from \"./parser\";\nimport {\n  isBasicType,\n  isFixedNumType,\n  isAddress,\n  isPath,\n  isArray,\n  isDictionary,\n  isComplexType,\n  wrongType,\n  isBasicNumType,\n} from \"./type-checker\";\n\nimport { removeSpaces } from \"./strings\";\nimport { getPlugins, applyPlugins, PLUGIN_TYPES } from \"./plugins\";\n\nconst throwTypeError = (msg) => {\n  throw new Error(\"Type Error: \" + msg);\n};\n\nexport const splitArgs = (pair) => {\n  return pair\n    .split(/(\\w+)\\s*:\\s*([\\w{}[\\]:\\s?]*)/)\n    .filter((item) => item !== \"\")\n    .map((item) => item.replace(/\\s*/g, \"\"));\n};\n\nexport const argType = (pair) => splitArgs(pair)[1];\n\nexport const getDictionaryTypes = (type) => {\n  const match = /{(.*)}/.exec(type);\n  return match[1]\n    .split(/([^:]*):(.*)/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item);\n};\n\nexport const getArrayType = (type) => {\n  const match = /\\[(.*)\\]/.exec(type);\n  return removeSpaces(match[1]);\n};\n\n/**\n * Reports missing arguments.\n * @param {number} found - number of arguments passed into method\n * @param {number} required - number of arguments required to execute the code\n * @param {string} prefix - error message prefix\n */\nexport const reportArguments = (found, required, prefix = \"\") => {\n  if (required > found) {\n    const errorMessage = `Incorrect number of arguments: found ${found} of ${required}`;\n    const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n    console.error(message);\n  }\n};\n\n/**\n * Reports missing items.\n * @param {string} itemType - name of the missing item\n * @param {number} found - number of arguments passed into method\n * @param {number} required - number of arguments required to execute the code\n * @param {string} prefix - error message prefix\n */\nexport const reportMissing = (itemType = \"items\", found, required, prefix = \"\") => {\n  if (required !== found) {\n    const errorMessage = `Incorrect number of ${itemType}: found ${found} of ${required}`;\n    const message = prefix ? `${prefix} ${errorMessage}` : errorMessage;\n    console.error(message);\n  }\n};\n\nexport const raw = (type) => type.slice(0, -1);\n\nexport const resolveBasicType = (type) => {\n  if (wrongType(type)) return false;\n\n  if (type.includes(\"?\")) {\n    return t.Optional(t[raw(type)]);\n  }\n  return t[type];\n};\n\nexport const resolveType = (type) => {\n  if (isComplexType(type)) {\n    switch (true) {\n      case isArray(type): {\n        const arrayType = getArrayType(type);\n        return t.Array(resolveType(arrayType));\n      }\n\n      case isDictionary(type): {\n        const [key, value] = getDictionaryTypes(type);\n        const dictionaryType = { key: resolveType(key), value: resolveType(value) };\n        return t.Dictionary(dictionaryType);\n      }\n\n      default: {\n        return resolveBasicType(type);\n      }\n    }\n  }\n  return resolveBasicType(type);\n};\n\n/**\n * Map single argument to fcl.arg representation.\n * @param {string} rawType - Cadence value type\n * @param {any} rawValue - actual value\n * @returns any - mapped fcl.arg value\n */\nexport const mapArgument = async (rawType, rawValue) => {\n  const plugins = await getPlugins(PLUGIN_TYPES.ARGUMENT);\n\n  let value = rawValue;\n  let type = rawType;\n\n  if (plugins) {\n    let applied = await applyPlugins({ type: rawType, value: rawValue }, plugins);\n    value = applied.value;\n    type = applied.type;\n  }\n\n  const resolvedType = resolveType(type);\n\n  switch (true) {\n    case isBasicType(type): {\n      return fcl.arg(value, resolvedType);\n    }\n\n    case isFixedNumType(type): {\n      // Try to parse value and throw if it fails\n      if (value === null) {\n        return fcl.arg(null, resolvedType);\n      }\n      if (isNaN(parseFloat(value))) {\n        throwTypeError(\"Expected proper value for fixed type\");\n      }\n      return fcl.arg(toFixedValue(value), resolvedType);\n    }\n\n    case isAddress(type): {\n      const prefixedAddress = withPrefix(value);\n      return fcl.arg(prefixedAddress, resolvedType);\n    }\n\n    case isPath(type): {\n      return fcl.arg(\n        parsePath(value),\n        resolvedType\n      );\n    }\n\n    case isArray(type): {\n      const arrayType = getArrayType(type);\n\n      if (isComplexType(arrayType)) {\n        const mappedValue = await Promise.all(\n          value.map(async (v) => {\n            const { value } = await mapArgument(arrayType, v);\n            return value;\n          })\n        );\n        return fcl.arg(mappedValue, resolvedType);\n      }\n\n      const result = fcl.arg(value, resolvedType);\n      return result;\n    }\n\n    case isDictionary(type): {\n      const [keyType, valueType] = getDictionaryTypes(type);\n      const finalValue = [];\n      const keys = Object.keys(value);\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        let resolvedValue;\n        if (isComplexType(valueType)) {\n          resolvedValue = (await mapArgument(valueType, value[key])).value;\n        } else {\n          resolvedValue = value[key];\n        }\n\n        const fixedKey = isBasicNumType(keyType) ? parseInt(key) : key;\n\n        finalValue.push({\n          key: fixedKey,\n          value: resolvedValue,\n        });\n      }\n\n      const result = fcl.arg(finalValue, resolvedType);\n      return result;\n    }\n\n    default: {\n      throw `${type} is not supported`;\n    }\n  }\n};\n\nexport const assertType = (arg) => {\n  return arg.xform.asArgument(arg.value);\n};\n\n/**\n * Map arguments with provided schema.\n * @param {[string]} schema - array of Cadence value types\n * @param {[any]} values - array of passed values\n * @returns [any] - array of mapped fcl.arg values\n */\nexport const mapArguments = async (schema = [], values) => {\n  if (schema.length > values.length) {\n    throw new Error(\"Not enough arguments\");\n  }\n  return Promise.all(\n    values.map(async (value, i) => {\n      const mapped = await mapArgument(schema[i], value);\n      assertType(mapped);\n      return mapped;\n    })\n  );\n};\n\n/**\n * Map arguments via Cadence template.\n * @param {string} code - Cadence template\n * @param {[any]} values - array of values\n * @returns [any] - array of mapped fcl.arg\n */\nexport const mapValuesToCode = async (code, values = []) => {\n  const schema = getTemplateInfo(code).args.map(argType);\n  return mapArguments(schema, values);\n};\n\nexport const unwrap = (arr, convert) => {\n  const type = arr[arr.length - 1];\n  return arr.slice(0, -1).map((value) => convert(value, type));\n};\n\nconst rawArgs = (args) => {\n  return args.reduce((acc, arg) => {\n    const unwrapped = unwrap(arg, (value, type) => {\n      return fcl.arg(value, type);\n    });\n    acc = [...acc, ...unwrapped];\n    return acc;\n  }, []);\n};\n\nexport const resolveArguments = async (args, code) => {\n  if (args.length === 0) {\n    return [];\n  }\n\n  // We can check first element in array. If it's last value is instance\n  // of @onflow/types then we assume that the rest of them are also unprocessed\n  const first = args[0];\n  if (Array.isArray(first) && first.length > 0) {\n    const last = first[first.length - 1];\n    if (last.asArgument) {\n      return rawArgs(args);\n    }\n  }\n  // Otherwise we process them and try to match them against the code\n  return mapValuesToCode(code, args);\n};\n","/*\n * Flow Template Utilities\n *\n * Copyright 2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { resolveArguments } from \"./args\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { config } from \"@onflow/config\";\nimport { getEnvironment } from \"./env\";\n\nexport const prepareInteraction = async (props, type) => {\n  const { code, cadence, args, addressMap, limit, processed } = props;\n\n  // allow to pass code via \"cadence\" field simillar to fcl.query/mutate\n  const codeTemplate = code || cadence;\n\n  const env = await getEnvironment();\n  const ixAddressMap = {\n    ...env,\n    ...addressMap,\n  };\n  const ixCode = processed ? codeTemplate : replaceImportAddresses(codeTemplate, ixAddressMap);\n\n  const ix = type === \"script\" ? [fcl.script(ixCode)] : [fcl.transaction(ixCode)];\n\n  if (args) {\n    const resolvedArgs = await resolveArguments(args, code);\n    ix.push(fcl.args(resolvedArgs));\n  }\n\n  // Handle execution limit\n  const defaultLimit = await config().get(\"ix.executionLimit\");\n  const fallBackLimit = defaultLimit || 100;\n\n  const ixLimit = limit || fallBackLimit;\n  ix.push(fcl.limit(ixLimit));\n\n  if (type === \"transaction\") {\n    const { proposer, payer, signers = [] } = props;\n    const ixSigners = signers.length === 0 ? [payer] : signers;\n    const ixProposer = proposer || payer;\n\n    ix.push(fcl.payer(payer));\n    ix.push(fcl.proposer(ixProposer));\n    ix.push(fcl.authorizations(ixSigners));\n  }\n\n  return fcl.send(ix);\n};\n\n/**\n * Sends script code for execution.\n * Returns decoded value.\n */\n\nexport const executeScript = async (props) => {\n  const { raw = false } = props;\n  try {\n    const response = await prepareInteraction(props, \"script\");\n\n    // In some cases one might want to have raw output without decoding the response\n    if (raw) {\n      return [response.encodedData, null];\n    }\n\n    const decoded = await fcl.decode(response);\n    return [decoded, null];\n  } catch (e) {\n    return [null, e];\n  }\n};\n\nexport const waitForStatus = (statusValue) => {\n  if (typeof statusValue === \"string\") {\n    const status = statusValue.toLowerCase();\n    if (status.includes(\"final\")) {\n      return \"onceFinalized\";\n    }\n\n    if (status.includes(\"exec\")) {\n      return \"onceExecuted\";\n    }\n\n    if (status.includes(\"seal\")) {\n      return \"onceSealed\";\n    }\n  }\n\n  // wait for transaction to be sealed by default\n  console.log(\n    `⚠️ \\x1b[33mStatus value \\x1b[1m\\x1b[35m\"${statusValue}\"\\x1b[33m\\x1b[2m is not supported. Reverting to \\x1b[32m\"onceSealed\"\\x1b[0m`\n  );\n  return \"onceSealed\";\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n */\nexport const sendTransaction = async (props) => {\n  const { wait = \"seal\" } = props;\n  try {\n    const response = await prepareInteraction(props, \"transaction\");\n    if (wait) {\n      const waitMethod = waitForStatus(wait);\n      const rawResult = await fcl.tx(response)[waitMethod]();\n      const txResult = {\n        txId: response,\n        ...rawResult,\n      };\n      return [txResult, null];\n    }\n    return [response.transactionId, null];\n  } catch (e) {\n    return [null, e];\n  }\n};\n\n// TODO: add arguments for \"init\" method into template\nexport const addContractTemplate = `\n    transaction(name: String, code: String) {\n      prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        \n        acct.contracts.add(\n          name: name,\n          code: decoded,\n        )\n      }\n    }\n  `;\nexport const updateContractTemplate = `\n  transaction(name: String, code: String){\n    prepare(acct: AuthAccount){\n      let decoded = code.decodeHex()\n      \n      if acct.contracts.get(name: name) == nil {\n        acct.contracts.add(name: name, code: decoded)\n      } else {\n        acct.contracts.update__experimental(name: name, code: decoded)\n      }\n    }\n  }\n`;\n\n// TODO: add jsdoc\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nexport const deployContract = async (props) => {\n  const {\n    name,\n    to,\n    payer,\n    proposer,\n    code: contractCode,\n    update = false,\n    processed = false,\n    addressMap = {},\n  } = props;\n\n  // Update imprort statement with addresses from addressMap\n  const ixContractCode = processed\n    ? contractCode\n    : replaceImportAddresses(contractCode, addressMap);\n\n  // TODO: Implement arguments for \"init\" method\n  const template = update ? addContractTemplate : updateContractTemplate;\n\n  const hexedCode = hexContract(ixContractCode);\n  const args = [name, hexedCode];\n  // Set roles\n  let ixProposer = to;\n  let ixPayer = to;\n  let ixSigners = [to];\n\n  if (payer) {\n    ixPayer = payer;\n    ixProposer = proposer || payer;\n  }\n\n  return sendTransaction({\n    payer: ixPayer,\n    proposer: ixProposer,\n    signers: ixSigners,\n    code: template,\n    args,\n  });\n};\n\nexport const updateContract = async (props) => {\n  return deployContract({ ...props, update: true });\n};\n"],"names":["DEPLOYED_CONTRACTS","emulator","FlowToken","FungibleToken","testnet","LockedTokens","StakingProxy","FUSD","mainnet","ACCESS_NODES","getEnvironment","async","env","config","get","getEnvironmentName","setEnvironment","networkName","options","network","toLowerCase","Error","port","endpoint","limit","accessNode","put","getPairs","line","split","map","item","replace","filter","length","collect","acc","contract","address","extractImports","code","includes","reduce","missingImports","addressMap","importsList","missing","key","Object","prototype","hasOwnProperty","call","push","report","list","prefix","errorMessage","console","error","reportMissingImports","REGEXP_IMPORT","replaceImportAddresses","byName","match","imp","_","Function","domains","capitalizeFirstLetter","input","first","toUpperCase","slice","underscoreToCamelCase","text","word","i","join","trimAndSplit","trimWith","splitBy","getSplitCharacter","indexOf","collapseSpaces","CONTRACT","TRANSACTION","SCRIPT","generateSchema","argsDefinition","stripComments","extract","keyWord","noComments","target","RegExp","exec","extractSigners","extractScriptArguments","extractTransactionArguments","extractContractName","singleLine","matches","extractContractParameters","noComplex","contractName","args","getTemplateInfo","template","test","signers","type","wrongType","isBasicNumType","startsWith","isArray","clearType","endsWith","isDictionary","isComplexType","PLUGIN_TYPES","ARGUMENT","registerPlugin","plugin","plugins","typedPlugins","[object Object]","getPlugins","byType","splitArgs","pair","argType","getDictionaryTypes","getArrayType","reportArguments","found","required","reportMissing","itemType","resolveBasicType","t","Optional","raw","resolveType","arrayType","Array","value","dictionaryType","Dictionary","mapArgument","rawType","rawValue","applied","props","resolver","result","applyPlugins","resolvedType","fixedType","isString","isCharacter","isBoolean","isBasicType","fcl","arg","isFixedNumType","isNaN","parseFloat","msg","throwTypeError","toFixed","isAddress","prefixedAddress","sansPrefix","isPath","path","parts","domain","identifier","parsePath","mappedValue","Promise","all","v","keyType","valueType","finalValue","keys","resolvedValue","fixedKey","parseInt","mapArguments","schema","values","mapped","xform","asArgument","mapValuesToCode","resolveArguments","arr","convert","unwrap","rawArgs","prepareInteraction","cadence","processed","codeTemplate","ixAddressMap","ixCode","ix","script","transaction","resolvedArgs","defaultLimit","proposer","payer","ixSigners","ixProposer","authorizations","send","executeScript","response","encodedData","decode","e","sendTransaction","wait","waitMethod","statusValue","status","log","waitForStatus","txId","tx","transactionId","deployContract","name","to","contractCode","update","ixContractCode","hexedCode","Buffer","from","toString","ixPayer","updateContract"],"mappings":"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"}
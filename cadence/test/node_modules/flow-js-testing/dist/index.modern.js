import{flowConfig as e}from"@onflow/fcl-config";import{config as n}from"@onflow/config";import t from"fs";import a from"path";import*as r from"@onflow/fcl";import{resolveArguments as s,getEnvironment as o,reportMissingImports as c,replaceImportAddresses as i,reportMissing as l,sendTransaction as g,extractContractParameters as d,generateSchema as u,splitArgs as p,deployContract as f,executeScript as m}from"flow-cadut";import{ec as w}from"elliptic";import{SHA3 as h}from"sha3";import*as M from"rlp";const A=(e,n,t)=>{if("string"==typeof n)return A(e,n.split("/"),t);if(!n.length)return e;try{const[a,...r]=n;return A(e[a],r,t)}catch(e){return t}},b=(t,a,r,s)=>{let o=A(e(),r,s);o||(o=s),n().put(t,o)},y=async e=>n().get(e),k=async(e,t={})=>{const{port:a=8080}=t,{pkey:r="48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902"}=t;b("PRIVATE_KEY",process,"accounts/emulator-account/key",r),b("SERVICE_ADDRESS",process,"accounts/emulator-account/address","f8d6e0586b0a20c7"),b("BASE_PATH",process,"testing/paths",e),n().put("accessNode.api",`http://localhost:${a}`)};function x(){return x=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},x.apply(this,arguments)}const S=e=>null==e?null:e.replace(/^0x/,""),T=e=>null==e?null:"0x"+S(e),F=new w("p256"),v=(e,n)=>{const t=F.keyFromPrivate(Buffer.from(e,"hex")).sign((e=>{const n=new h(256);return n.update(Buffer.from(e,"hex")),n.digest()})(n)),a=t.r.toArrayLike(Buffer,"be",32),r=t.s.toArrayLike(Buffer,"be",32);return Buffer.concat([a,r]).toString("hex")},P=(e,t=0)=>async(a={})=>{const s=await n().get("SERVICE_ADDRESS"),o=await n().get("PRIVATE_KEY");return x({},a,{tempId:`${e=S(e||s)}-${t}`,addr:r.sansPrefix(e),keyId:t,signingFunction:async n=>({keyId:t,addr:T(e),signature:v(o,n.message)})})},E=e=>"object"==typeof e&&null!==e,B=e=>async n=>{let t,a,r,s,o,c,i,l;if(E(n[0])){const[e]=n,{name:l,code:g,args:d,signers:u,transformers:p,limit:f,service:m=!1}=e;if(o=m,!l&&!g)throw Error("Both `name` and `code` are missing. Provide either of them");a=l,t=g,r=u,s=d,c=p||[],i=f}else"script"===e?[a,s,i,c]=n:[a,r,s,i,c]=n;if(i=i||999,a){const n="script"===e?Te:Se;t=await n({name:a})}l=o?Ae:await Me(t);const g=await ie(),d=x({},Ae,l,{FlowManager:g});t=he(t,d);for(const e in c){const n=c[e];t=await n(t)}return{code:t,signers:r,args:s,limit:i}},C=async(...e)=>{try{const n=B("tx"),{code:t,args:a,signers:o,limit:c}=await n(e),i=P(),l=[r.transaction(t),r.payer(i),r.proposer(i),r.limit(c)];if(o){const e=o.map(e=>P(e));l.push(r.authorizations(e))}else l.push(r.authorizations([i]));if(a){const e=await s(a,t);l.push(r.args(e))}const g=await r.send(l);return[await r.tx(g).onceExecuted(),null]}catch(e){return[null,e]}},R=async(...e)=>{try{const n=B("script"),{code:t,args:a,limit:o}=await n(e),c=[r.script(t),r.limit(o)];if(a){const e=await s(a,t);c.push(r.args(e))}const i=await r.send(c);return[await r.decode(i),null]}catch(e){return[null,e]}},I="\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n\n",O=async(e={})=>{const n=x({},await o(),e);return c(I,n,"createAccount =>"),i(I,n)},U="\nimport FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",$=async(e={})=>{const n=x({},await o(),e);return c(U,n,"deployContract =>"),i(U,n)},_='\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: "FlowManager",\n           code: code.decodeHex(),\n        )\n   }\n  }\n',D=async(e={})=>{const n=x({},await o(),e);return c(_,n,"initManager =>"),i(_,n)},L='\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic("Signer is not the token admin")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic("Unable to borrow receiver reference")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n',H=async(e={})=>{const n=x({},await o(),e);return c(L,n,"mintTokens =>"),i(L,n)},G="\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",K=async(e={})=>{const n=x({},await o(),e);return c(G,n,"registerContract =>"),i(G,n)},V="\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n",z=async(e={})=>{const n=x({},await o(),e);return c(V,n,"scratch =>"),i(V,n)},N="\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n",Y=async(e={})=>{const n=x({},await o(),e);return c(N,n,"setBlockOffset =>"),i(N,n)},j="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",W=async(e={})=>{const n=x({},await o(),e);return c(j,n,"updateContract =>"),i(j,n)};var q={createAccountTemplate:O,createAccount:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await O(n);return l("arguments",t.length,3,"createAccount =>"),l("signers",a.length,1,"createAccount =>"),g(x({code:r},e))},deployContractTemplate:$,deployContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await $(n);return l("arguments",t.length,3,"deployContract =>"),l("signers",a.length,1,"deployContract =>"),g(x({code:r},e))},initManagerTemplate:D,initManager:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await D(n);return l("arguments",t.length,1,"initManager =>"),l("signers",a.length,1,"initManager =>"),g(x({code:r},e))},mintTokensTemplate:H,mintTokens:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await H(n);return l("arguments",t.length,2,"mintTokens =>"),l("signers",a.length,1,"mintTokens =>"),g(x({code:r},e))},registerContractTemplate:K,registerContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await K(n);return l("arguments",t.length,2,"registerContract =>"),l("signers",a.length,1,"registerContract =>"),g(x({code:r},e))},scratchTemplate:z,scratch:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await z(n);return l("arguments",t.length,0,"scratch =>"),l("signers",a.length,1,"scratch =>"),g(x({code:r},e))},setBlockOffsetTemplate:Y,setBlockOffset:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await Y(n);return l("arguments",t.length,1,"setBlockOffset =>"),l("signers",a.length,1,"setBlockOffset =>"),g(x({code:r},e))},updateContractTemplate:W,updateContract:async e=>{const{addressMap:n,args:t=[],signers:a=[]}=e,r=await W(n);return l("arguments",t.length,3,"updateContract =>"),l("signers",a.length,1,"updateContract =>"),g(x({code:r},e))}};const{updateContractTemplate:J,deployContractTemplate:Q}=q,X=e=>Buffer.from(e,"utf8").toString("hex"),Z=async(...e)=>{const n=await(async e=>{let n,t,a,r,s;if(E(e[0])){const[o]=e,{name:c,to:i,addressMap:l,args:g,update:d}=o;if(!c)throw Error("'name' field is missing");n=c,t=i,r=g,a=l,s=d}else[n,t,a,r,s]=e;const o=await ie();return{name:n,to:t,args:r,update:s,addressMap:x({},Ae,{FlowManager:o},a)}})(e),{to:t,name:a,addressMap:r,args:s,update:o=!1}=n,c=t||await ie(),i=await xe({name:a,addressMap:r});return ee({to:c,code:i,name:a,args:s,update:o})},ee=async e=>{const{to:n,code:t,name:a,args:r,update:s}=e,o=n||await ie(),c=await ie(),i=X(t),l={FlowManager:c};let g=s?await J(l):await Q(l),f=[a,i,c];const m=await d(t);if(r){f=f.concat(r);const e=u(m.args).map(e=>p(e)[0]),n="abcdefghijklmnopqrstuvwxyz";let t=[];for(let a=0;a<e.length;a++)t.push(`${n[a]}: ${e[a]}`);g=g.replace("##ARGS-WITH-TYPES##",`, ${m.args}`),g=g.replace("##ARGS-LIST##",t)}else g=g.replace("##ARGS-WITH-TYPES##",""),g=g.replace("##ARGS-LIST##","");return C({code:g,args:f,signers:[o]})},ne='\n  pub contract FlowManager {\n\n    /// Account Manager\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub fun getAccountAddress(_ name: String): Address?{\n        let accountManager = self.account\n            .getCapability(self.accountManagerPath)\n            .borrow<&FlowManager.Mapper>()!\n\n        return accountManager.getAddress(name)\n    }\n\n    pub let defaultAccounts: {Address : String}\n\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\n        let alias = self.defaultAccounts[address]!\n        return self.getAccountAddress(alias)!\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    /// Environment Manager\n    pub event BlockOffsetChanged(offset: UInt64)\n\n    pub struct MockBlock {\n        pub let id: [UInt8; 32]\n        pub let height: UInt64\n        pub let view: UInt64\n        pub let timestamp: UFix64\n\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\n            self.id = id\n            self.height = height\n            self.view = view\n            self.timestamp = timestamp\n        }\n    }\n\n    pub fun setBlockOffset(_ offset: UInt64){\n        self.blockOffset = offset\n        emit FlowManager.BlockOffsetChanged(offset: offset)\n    }\n\n    pub fun getBlockHeight(): UInt64 {\n        var block = getCurrentBlock()\n        return block.height + self.blockOffset\n    }\n\n    pub fun getBlock(): MockBlock {\n        var block =  getCurrentBlock()\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\n        return mockBlock\n    }\n\n    pub var blockOffset: UInt64;\n\n\n    // Initialize contract\n    init(){\n        // Environment defaults\n        self.blockOffset = 0;\n\n        // Account Manager initialization\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.defaultAccounts = {\n          0x01: "Alice",\n          0x02: "Bob",\n          0x03: "Charlie",\n          0x04: "Dave",\n          0x05: "Eve"\n        }\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n',te="\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n",ae="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n",re='\n  // This script reads the balance field of an account\'s FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic("Could not borrow Balance reference to the Vault")\n\n    return vaultRef.balance\n}\n',se="\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n",oe="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n";var ce=q;const ie=async()=>T(await n().get("SERVICE_ADDRESS")),le=async()=>{const e={FlowManager:await ie()},n=await(async(e={})=>{const n=x({},await o(),e);return c(te,n,"checkManager =>"),i(te,n)})(e);let[t,a]=await R({code:n,service:!0});return a&&null===t&&await(async()=>{const e=await ce.initManagerTemplate(),n=await(async(e={})=>{const n=x({},await o(),e);return c(ne,n,"FlowManager =>"),i(ne,n)})(),t=[X(n)];await C({code:e,args:t,service:!0})})(),ie()},ge=async()=>{const e=await le(),n=await(async(e={})=>{const n=x({},await o(),e);return c(se,n,"getBlockOffset =>"),i(se,n)})({FlowManager:e});return R({code:n})},de=async e=>{const n=await le(),t=[e],a=await ce.setBlockOffsetTemplate({FlowManager:n});return C({code:a,args:t,payer:[n]})},ue=async(e,n=!1)=>{if(n){const n=Ae[e];if(void 0!==n)return n}const t=await le(),a={FlowManager:t},r=await(async(e={})=>{const n=x({},await o(),e);return c(oe,n,"getContractAddress =>"),i(oe,n)})(a),s=[e,t],[l]=await R({code:r,args:s,service:!0});return l},pe=/(\s*import\s*)([\w\d]+)(\s+from\s*)([\w\d".\\/]+)/g,fe=e=>e.split(/\s/).map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0&&"import"!==e&&"from"!==e),me=(e,n)=>{const[t,a]=n;return e[t]=a,e},we=e=>e&&0!==e.length?e.split("\n").filter(e=>e.includes("import")).map(fe).reduce(me,{}):{},he=(e,n,t=!0)=>e.replace(pe,(e,a,r,s,o)=>{const c=t?r:o;return`${a}${r} from ${n instanceof Function?n(c):n[c]}`}),Me=async e=>{const n={},t=we(e);for(const e in t)if(Ae[e])n[e]=Ae[e];else{const t=await ue(e);n[e]=t}return n},Ae={FlowToken:"0x0ae53cb6e3f42a79",FungibleToken:"0xee82856bf20e2aa6",FlowFees:"0xe5a8b7f23e8b548f",FlowStorageFees:"0xf8d6e0586b0a20c7"},be={"0xe5a8b7f23e8b548f":"0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7":"0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79":"0x0ae53cb6e3f42a79","0xee82856bf20e2aa6":"0xee82856bf20e2aa6"},ye=async(e,t="transactions")=>{const r=await n().get("BASE_PATH");let s=r;if(E(r)){const n=r[t];if(n)return a.resolve(n,`./${e}.cdc`);s=r.base}return a.resolve(s,`./${t}/${e}.cdc`)},ke=(e,n={},a=!1)=>{const r=(e=>t.readFileSync(e,"utf8"))(e);return n?he(r,x({},a?be:Ae,n)):r},xe=async({name:e,addressMap:n})=>{const t=await ye(e,"contracts");return ke(t,n)},Se=async({name:e,addressMap:n})=>{const t=await ye(e,"transactions");return ke(t,n)},Te=async({name:e,addressMap:n})=>{const t=await ye(e,"scripts");return ke(t,n)},Fe={ExampleToken:Ae.FlowToken},ve=e=>e[0].toLowerCase()+e.slice(1),Pe=async e=>{const n=await(async e=>(await(async(e={})=>{const n=x({},await o(),e);return c(re,n,"getBalance =>"),i(re,n)})(Fe)).replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:ve(e)))("FlowToken"),t=he(n,Ae);return R({code:t,args:[e]})},Ee=async(e,n)=>{const t=await(async e=>(await ce.mintTokensTemplate(Fe)).replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:ve(e)))("FlowToken"),a=he(t,Ae);return C({code:a,args:[e,n]})},Be=async e=>{const t=e||`deployment-account-${(Math.random()*Math.pow(10,8)).toFixed(0)}`,a=await le(),r={FlowManager:a};let s;const l=await(async(e={})=>{const n=x({},await o(),e);return c(ae,n,"getAccountAddress =>"),i(ae,n)})(r),g=[t,a],[d]=await R({code:l,args:g,service:!0});if(s=d,null===s){const e=await ce.createAccountTemplate(r),o=[t,await(async()=>{const e=F.keyFromPrivate(Buffer.from(await n().get("PRIVATE_KEY"),"hex")).getPublic("hex").replace(/^04/,"");return M.encode([Buffer.from(e,"hex"),2,3,1e3]).toString("hex")})(),a],[c]=await C({code:e,args:o}),{events:i}=c;s=i.find(e=>e.type.includes("AccountAdded")).data.address}return s},{expect:Ce}=global,Re=async e=>"function"==typeof e?await e():await e,Ie=async e=>{const n=Re(e);let t,a,r=await n;if(Array.isArray(r)){const{status:e,errorMessage:n}=r[0];t=e,a=n}else{const{status:e,errorMessage:n}=r;t=e,a=n}return await Ce(t).toBe(4),await Ce(a).toBe(""),Re(e)},Oe=async e=>Re(e),Ue=async e=>{const n=Re(e);let t;try{const[e,a]=await n;t=a,await Ce(e).toBe(null)}catch(e){t="ERROR!"}await Ce(t).not.toBe(null)},$e=async e=>{const n=Re(e);let t;try{const[e,a]=await n;t=a,await Ce(e).toBe(null)}catch(e){t="ERROR!",await Ce(n).rejects.toThrow()}await Ce(t).not.toBe(null)},_e=async e=>{let n=e;return((e,n)=>new RegExp("import\\s+FlowManager").test(n))(0,e)||(n=`\n      ${await(async()=>`import FlowManager from ${await ie()}`)()}\n      ${e}  \n  `),n.replace(/getCurrentBlock\(\).height/g,"FlowManager.getBlockHeight()")},{spawn:De}=require("child_process");var Le=new class{constructor(){this.initialized=!1,this.logging=!1,this.logProcessor=e=>e}setLogging(e){this.logging=e}log(e,n="log"){this.logging&&console[n](e)}extractKeyValue(e){const[n,t]=e.split("=");return t.includes("LOG")?{key:n,value:t.replace('"[1;34m','"[1[34m')}:{key:n,value:t}}parseDataBuffer(e){const n=e.toString().match(/((\w+=\w+)|(\w+=".*?"))/g);return n?n.map(e=>e.replace(/"/g,"")).reduce((e,n)=>{const{key:t,value:a}=this.extractKeyValue(n);return e[t]=a,e},{}):{}}async start(e=8080,n=!1){let t=e-8080+3569;return this.logging=n,this.filters=[],this.process=De("flow",["emulator","-v","--http-port",e,"--port",t]),this.logProcessor=e=>e,new Promise((e,n)=>{this.process.stdout.on("data",n=>{if(this.filters.length>0){for(let e=0;e<this.filters.length;e++)if(n.includes(`${this.filters[e]}`)){this.log(`LOG: ${n}`);break}}else this.log(`LOG: ${n}`);n.includes("Starting HTTP server")&&(this.log("EMULATOR IS UP! Listening for events!"),this.initialized=!0,e(!0))}),this.process.stderr.on("data",e=>{this.log(`ERROR: ${e}`,"error"),this.initialized=!1,n()}),this.process.on("close",n=>{this.log(`emulator exited with code ${n}`),this.initialized=!1,e(!1)})})}clearFilters(){this.filters=[]}removeFilter(e){this.filters=this.filters(n=>n!==e)}addFilter(e){this.filters.includes(e)||this.filters.push(e)}async stop(){return new Promise(e=>{this.process.kill(),setTimeout(()=>{this.initialized=!1,e(!1)},50)})}};export{_e as builtInMethods,ee as deployContract,Z as deployContractByName,Le as emulator,R as executeScript,we as extractImports,Be as getAccountAddress,ge as getBlockOffset,y as getConfigValue,ue as getContractAddress,xe as getContractCode,Pe as getFlowBalance,Te as getScriptCode,ie as getServiceAddress,ke as getTemplate,Se as getTransactionCode,k as init,Ee as mintFlow,Re as promise,he as replaceImportAddresses,Me as resolveImports,C as sendTransaction,b as set,de as setBlockOffset,Ie as shallPass,Oe as shallResolve,Ue as shallRevert,$e as shallThrow};
//# sourceMappingURL=index.modern.js.map
